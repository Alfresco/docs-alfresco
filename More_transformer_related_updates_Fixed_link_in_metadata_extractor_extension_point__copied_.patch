Index: content-services/community/develop/repo-ext-points/content-transformers-renditions.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- content-services/community/develop/repo-ext-points/content-transformers-renditions.md	(revision 8854db621287f954e232390afc689ea7bdbf0998)
+++ content-services/community/develop/repo-ext-points/content-transformers-renditions.md	(revision db02f804fb60804e4b03ce7db4985a32182e6670)
@@ -1,14 +1,13 @@
 ---
-title: Content Transformers (Renditions) Extension Point
+title: Content Transformers and Renditions Extension Point
 ---
 
-Community Edition provides many different types of content transformations out-of-the-box. Custom transformations 
+Content Services provides many different types of content transformations out-of-the-box. Custom transformations 
 can also be implemented and configured.
 
 Architecture Information: [Platform Architecture]({% link content-services/community/develop/software-architecture.md %}#platformarch)
 
 ## Description
-
 Content transformers transform one type of content into another, such as a HTML file into a PDF file. They are used to 
 enable indexing, thumbnails, and preview of content. If the target type cannot be achieved with one transformation 
 several transformations can be chained together, such as JSON to HTML to PDF. To implement these transformations, third 
@@ -30,351 +29,19 @@
 pipelines when it is not possible to go directly from source mimetype to target mimetype. Renditions are related to 
 Transformations and they will be covered at the end of this article.
 
-To find out what transformers are currently registered and active within an Community Edition installation, 
-you can use an admin Web Script. This is available at `http://localhost:8080/alfresco/service/mimetypes`.
+To find out what transformers are currently registered and active within an Content Services installation, 
+you can use an admin Web Script. This is available at 
+[http://localhost:8080/alfresco/service/mimetypes](http://localhost:8080/alfresco/service/mimetypes){:target="_blank"}. 
 This will list all the currently registered mimetypes, and provide a details link for each one. Selecting the details 
 link will then show which transformations are currently supported both to and from that mimetype, and by what transformer. 
 If a transformer becomes unavailable (for example, if the JOD/LibreOffice connection fails), then refreshing the list 
 will show the updated transformations.
 
 When working with transformations and renditions it is important to make sure that the involved mimetypes are known to 
-Community Edition. So when accessing the "mimetypes" Web Script make sure the mimetypes that will be used in 
-transformations and renditions are included there, if not you would have to register them with Community Edition, 
+Content Services. So when accessing the "mimetypes" Web Script make sure the mimetypes that will be used in 
+transformations and renditions are included there, if not you would have to register them with Content Services, 
 see the [Mimetypes extension point]({% link content-services/community/develop/repo-ext-points/mimetypes.md %}) for more information about that.
 
-The Spring bean definitions for the transformer implementations can be found in the `content-services-context.xml` file. 
-This file is contained in the repository JAR and can be found as follows in an installation:
-
-```bash
-$ find . -name "*.jar" | xargs grep "content-services-context.xml" 
-Binary file ./tomcat/webapps/alfresco/WEB-INF/lib/alfresco-repository-5.1.d-EA.jar matches
-```
-
-Inside this XML file are the bean definitions for the transformer implementations, such as:
-
-```xml
-<bean id="transformer.PdfBox"
-      class="org.alfresco.repo.content.transform.PdfBoxContentTransformer"
-      parent="baseContentTransformer" >
-  <property name="documentSelector" ref="pdfBoxEmbededDocumentSelector" />
-</bean>
-```
-
-The transformer bean definition does not contain the source to target mimetype transformations it supports, rather 
-this is contained in a properties file for easier management by a System Administrator (and these properties can be 
-re-defined in` alfresco-global.properties`). This properties file is also located in the repository JAR 
-(`/alfresco/subsystems/Transformers/default`) and is called `transformers.properties`. The configuration for the 
-`PdfBoxContentTransformer` is as follows:
-
-```text
-content.transformer.PdfBox.priority=110 
-content.transformer.PdfBox.extensions.pdf.txt.priority=50
-content.transformer.PdfBox.extensions.pdf.txt.maxSourceSizeKBytes=25600
-```
-
-The `content.transformer.PdfBox.extensions.pdf.txt.maxSourceSizeKBytes=25600` property setting ensures that PDFBox works 
-only with PDF files up to 25MB. Note also that the `content.transformer.TikaAuto.extensions.pdf.txt.maxSourceSizeKBytes=25600` 
-property setting ensures that TikaAuto works only with PDF text files up to 25MB.
-
-The properties have names that follow a certain convention:
-
-```text
-content.<transformer bean id>.<property name> (Some custom property for the transformer)
-content.<transformer bean id>.priority=<number> (Default priority for this transformer)
-content.<transformer bean id>.extensions.<source mimetype>.<target mimetype>.priority=<number>  (Priority for this transformation) 
-content.<transformer bean id>.extensions.<source mimetype>.<target mimetype>.pipeline=transformer 1 | intermediate mimetype A)| transformer 2   
-content.<transformer bean id>.extensions.<source mimetype>.<target mimetype>.failover=transformer 1 (mimetype A)| transformer 2 (mimetype A)
-content.<transformer bean id>.extensions.<source mimetype>.<target mimetype>.supported=[true|false]
-```
-
-The concept of 'explicit' transformations does not exist but instead the `priority` and `supported` properties are used 
-to determine what transformations that are used. As the default priority is 100, setting the priority to 50 normally 
-results in the transformer being used. Other compatible transformers will be tried in priority order if the one with 
-highest priority fails for some reason. If multiple transformations are needed to get from source to target mimetype a 
-`pipeline` transformation can be set up. It is also possible to control exactly which transformers are used in case of 
-a failure by using the `failover` property.
-
-If you are running an Enterprise edition these properties may be changed via JMX while Community Edition is 
-running (note, any changes via JMX and database takes precedence over any property file settings).
-
-You can create custom content transformers to transform one type of content into another, where that transformation 
-is not already supported, such as when you have a custom input content type, or custom output content type. Take the 
-JSON mimetype for example, if you upload a JSON file to the repository it will not have a thumbnail or a preview, and 
-it will not be indexed and searchable.
-
-The following will show up in the logs when debugging is turned on (turn it on via 
-`log4j.logger.org.alfresco.repo.content.transform.TransformerDebug=DEBUG and log4j.logger.org.alfresco.repo.content.transform=DEBUG`):
-
-```text
-2016-01-05 07:50:15,111  DEBUG [content.transform.ContentTransformerRegistry] [http-bio-8443-exec-9] Searched for transformer: 
-   source mimetype: application/json
-   target mimetype: image/jpeg
-   transformers: []
- 2016-01-05 07:50:15,116  DEBUG [content.transform.ContentTransformerRegistry] [http-bio-8443-exec-9] Searched for transformer: 
-   source mimetype: application/json
-   target mimetype: text/plain
-   transformers: []
- 2016-01-05 07:50:15,117  DEBUG [content.transform.TransformerDebug] [http-bio-8443-exec-9] 10  json txt  testnode.json 968 bytes -- index -- SolrIndexer NO transformers
- 2016-01-05 07:50:15,117  DEBUG [content.transform.TransformerDebug] [http-bio-8443-exec-9] 10  workspace://SpacesStore/68b0e43d-d972-406d-b211-52ce647ef41a 
- 2016-01-05 07:50:15,117  DEBUG [content.transform.TransformerLog] [http-bio-8443-exec-9] 10    json txt  INFO testnode.json 968 bytes 7 ms No transformers
- 2016-01-05 07:50:15,117  DEBUG [content.transform.TransformerDebug] [http-bio-8443-exec-9] 10  Finished in 7 ms Transformer NOT called
-```
-
-You can also see that there is no transformations available for the JSON mimetype on the 
-`http://localhost:8080/alfresco/service/mimetypes?mimetype=application/json#application/json` admin page:
-
-```text
-**application/json - json**
-   *No extractors*
-   **Transformable To:** *Cannot be transformed into anything else*
-   **Transformable From:** *Cannot be generated from anything else*
-```
-
-So if you wanted to change that you could implement a JSON to HTML transformation to start with. That would give you a 
-lot of functionality as HTML is already fully supported with thumbnail, preview, indexing and search. To do this you 
-will need a tool that can convert from JSON to HTML. One such tool is [json2html](https://github.com/softvar/json2html){:target="_blank"}, 
-which is written in Python and can easily be invoked from the command line, and also then from a custom transformer. 
-It produces a HTML table with the JSON data. To create this transformer you do not need to do any Java coding, just some 
-Spring bean definitions and Python script coding.
-
-Starting with the Spring beans for the custom transformer you would use the `RuntimeExecutableContentTransformerWorker` 
-class as a bean implementation. It is able to execute any command line transformation that accepts an input and an output 
-file on the command line. Basically, if you have a command line utility or a script that takes an input file, called the 
-source, and an output file, called the target, then you can invoke it via this class. This is a technique used for a lot 
-of custom transformation implementations.
-
-Here is the Spring bean definition for what is referred to as the transformer worker:
-
-```xml
-<beans>
-   <bean id="transformer.worker.json2html" class="org.alfresco.repo.content.transform.RuntimeExecutableContentTransformerWorker" >
-    <property name="mimetypeService">
-      <ref bean="mimetypeService" />
-    </property>
-    <property name="checkCommand">
-      <bean class="org.alfresco.util.exec.RuntimeExec">
-        <property name="commandsAndArguments">
-          <map>
-            <entry key=".*">
-              <list>
-                <value>ls</value>
-                <value>/home/martin/Downloads/temp/transformation/convertJson2html.py</value>
-              </list>
-            </entry>
-          </map>
-        </property>
-      </bean>
-    </property>
-    <property name="transformCommand">
-      <bean class="org.alfresco.util.exec.RuntimeExec">
-        <property name="commandsAndArguments">
-          <map>
-            <entry key=".*">
-              <list>
-                <value>/home/martin/Downloads/temp/transformation/convertJson2html.py</value>
-                <value>${source}</value>
-                <value>${target}</value>
-              </list>
-            </entry>
-          </map>
-        </property>
-        <property name="errorCodes">
-          <value>1,2</value>
-        </property>
-      </bean>
-    </property>
-  </bean>
-```
-
-The transformer worker does the actual job of executing the transformation. It has two important properties that need to 
-be set, the `checkCommand` property, which is used to verify that the command line tool/script that is to be used for 
-the transformation is actually available. The other property is called `transformCommand` and should contain the 
-script/tool path plus the source and target variables, which will resolve to temporary files that will be used during 
-the transformation. If you want to run one script on Linux and another one on Windows you can provide multiple entries 
-in the command line arguments map as in the following example:
-
-```xml
-<property name="transformCommand">
-      <bean class="org.alfresco.util.exec.RuntimeExec">
-        <property name="commandsAndArguments">
-          <map>
-            <entry key="Windows.*">
-              <list>
-                <value>cmd</value>
-                <value>/C</value>
-                <value>${ffmpeg.exe} ${opts} ${infile_opts} -i "${source}" ${outfile_opts} "${target}" 2&gt; NUL</value>
-              </list>
-            </entry>
-            <entry key="Linux">
-              <list>
-                <value>sh</value>
-                <value>-c</value>
-                <value>${ffmpeg.exe} ${opts} ${infile_opts} -i '${source}' ${outfile_opts} '${target}' 2&gt; /dev/null</value>
-              </list>
-            </entry>
-            <entry key="Mac OS X">
-              <list>
-                <value>sh</value>
-                <value>-c</value>
-                <value>${ffmpeg.exe} ${opts} ${infile_opts} -i '${source}' ${outfile_opts} '${target}' 2&gt; /dev/null</value>
-              </list>
-            </entry>
-          </map>
-        </property>
-        <property name="waitForCompletion">
-          <value>true</value>
-        </property>
-        <property name="defaultProperties">
-          <props>
-            <prop key="opts">-y</prop>
-            <prop key="infile_opts"/>
-            <prop key="outfile_opts">-f flv</prop>
-          </props>
-        </property>
-      </bean>
-    </property>
-```
-
-When the transformation worker bean is defined you can refer to it from the transformation bean definition:
-
-```xml
-<bean id="transformer.json2html" class="org.alfresco.repo.content.transform.ProxyContentTransformer" parent="baseContentTransformer">
-    <property name="worker">
-       <ref bean="transformer.worker.json2html" />
-    </property>
-  </bean>
-```
-
-The transformer bean needs to specify `baseContentTransformer` as the parent, as it handles registering this new 
-transformer with the Community Edition system. The transformer implementation class that you use in this case 
-is called `ProxyContentTransformer` and it is delegating the actual transformation to the worker. The last thing you 
-need to do for this transformer to be active is to add some properties to `alfresco-global.properties`:
-
-```text
-content.transformer.json2html.priority=30
-content.transformer.json2html.extensions.json.html.supported=true
-content.transformer.json2html.extensions.json.html.priority=30
-```
-
-See above for more information about these properties.
-
-Currently the transformer would halt on the Python script call as that has not yet been implemented. Download the 
-`json2html` python module as follows:
-
-```bash
-$ sudo pip install json2html
-```
-
-Now create a script called `convertJson2html.py`:
-
-```python
-#!/usr/bin/python
-
-import os, sys
-
-lib_path = os.path.abspath(os.path.join('..'))
-sys.path.append(lib_path)
-
-from json2html import *
-
-# Get the source and target file
-print 'Number of arguments:', len(sys.argv), 'arguments.'
-print 'Argument List:', str(sys.argv)
-sourceTempFile = sys.argv[1]
-targetTempFile = sys.argv[2]
-
-# Open and read the JSON source file
-with open(sourceTempFile, 'r') as jsonF:
-   jsondata = jsonF.read()
-print "Read json is : ", jsondata
-
-# Run conversion to HTML
-jsonAsHTML = json2html.convert(json = jsondata)
-
-# Write the resulting HTML representation of the JSON to target file
-with open(targetTempFile, 'w+') as htmlF:
-   htmlF.write(jsonAsHTML)
-```
-
-You can test this script from command line before trying the transformation:
-
-```bash
-$ python convertJson2html.py testnode.json test.html
-```
-
-This assumes that the `testnode.json` file is in the same directory as the script is run from.
-
-You are now ready to test this new JSON to HTML transformer. The only thing you need to do is create a rule that runs 
-a script that does the following:
-
-```text
-document.transformDocument("text/html");
-```
-
-Uploading a JSON file to a folder with this rule will result in a new HTML file being generated as a result of the 
-transformation, you will see something like this:
-
-![dev-extensions-repo-transformations-json2html-result]({% link content-services/images/dev-extensions-repo-transformations-json2html-result.png %})
-
-You can see that the newly generated HTML file has a thumbnail (refresh the page to see it). If you navigate to the 
-details page a preview will also be available, and you can search for the content in the JSON file and you would see 
-the HTML version of it. You could expand the JavaScript file to move the generated HTML file somewhere else in the 
-repository if you needed to.
-
-The next step is to create a pipeline transformation JSON to HTML to TEXT to make the JSON searchable and to avoid 
-having the extra HTML file generated. This can be achieved with some extra properties in the configuration:
-
-```text
-content.transformer.json2text.pipeline=*|html|*
-content.transformer.json2text.extensions.json.txt.priority=30
-content.transformer.json2text.extensions.json.txt.supported=true
-```
-
- This defines a transformation pipeline (also referred to as a complex transformer). With the `*|html|*` expression 
- means convert any supported extension (that is only json to txt) by using any transformer that can convert JSON to 
- first the intermediate format HTML, which is what the transformer we just implemented above does, then use any other 
- transformer to convert HTML to TXT, which is supported out-of-the-box. After this change you will see that any 
- uploaded JSON file is now searchable (remember to disable the rule). Note that there is no Spring bean defined for 
- the `transformer.json2text`.
-
- To get the thumbnail you need to define another pipeline for JSON to PNG:
-
-```text
-content.transformer.json2png.pipeline=*|html|*
-content.transformer.json2png.extensions.json.png.priority=30
-content.transformer.json2png.extensions.json.png.supported=true
-```
-
-Running with this pipeline configuration will first initiate a transform to HTML and then to PNG with any out-of-the-box 
-transformer supporting HTML to PNG.
-
-Finally you can get the preview working with the following JSON to PDF pipeline configuration:
-
-```text
-content.transformer.json2pdf.pipeline=*|html|*
-content.transformer.json2pdf.extensions.json.pdf.priority=30
-content.transformer.json2pdf.extensions.json.pdf.supported=true
-```
-
-Community Edition supports PDF previewing so as long as you can transform your content into a PDF it will be 
-available for preview in the Document Details page.
-
-When implementing a transformer, it is possible to associate it with an Edition, such as in the following example:
-
-```text
-content.transformer.complex.JodConverter.PdfBox.edition=Enterprise
-```
-
-This sets the `transformer.complex.JodConverter` to be available only for Community Edition installations. 
-It is also possible to associate a transformer with a specific AMP:
-
-```text
-content.transformer.json2html.amp=custom-content-transformer-repo
-```
-
-This would make your custom JSON content transformer available only if an AMP with module id `custom-content-transformer-repo` 
-has been applied.
-
 Related to transformations are **renditions**, and the purpose of them is to provide support for rendering a specific 
 content item into other forms, known as renditions. The rendition items are derived from their source item and as such 
 can be updated automatically when their source item's content (or other properties) are changed.
@@ -392,7 +59,7 @@
 specified explicitly or as templated paths.
 
 The following describes an example with the `reformat` rendering engine and the custom transformation you have previously 
-implemented (that is json to html). You can invoke the rendering engine and create an HTML rendition for a JSON document 
+implemented (that is `.json` to `.html`). You can invoke the rendering engine and create an HTML rendition for a JSON document 
 via JavaScript executed from a folder rule:
 
 ```javascript
@@ -405,7 +72,7 @@
 
 The rendition definition name is a QName that we have to come up with, use a known namespace such as `cm`. 
 The `mime-type` parameter tells the `reformat` rendering engine that the new rendition should be a HTML file. 
-By default this rendition will be store as a hidden child to the uploaded JSON document. If you used the Node Browser 
+By default this rendition will be stored as a hidden child to the uploaded JSON document. If you used the Node Browser 
 to inspect the JSON content node you should see three hidden renditions as follows:
 
 ```text
@@ -416,57 +83,458 @@
 cm:pdf               cm:thumbnail workspace://SpacesStore/8b3ec283-cd2a-4378-af2d-e72e30127210  true     rn:rendition       2
 ```
 
-If the solution being implemented is very transformation intensive a remote, then use the 
-[Document Transformation Engine]({% link content-services/community/admin/transformations.md %}#doctransformengine). It 
-would be totally dedicated to performing transformations, and can be scaled out separately from the rest of the 
-Community Edition system, depending on transformation load.
+## Transformation changes from Content Services 6.2
+From Content Services version 6.2 it is possible to create custom transforms that run in separate processes known as 
+T-Engines (short for Transformer Engines). The same engines may be used in Community and Enterprise Editions. They may be 
+directly connected to the Repository as Local Transforms, but in the Enterprise edition there is the option to include 
+them as part of Alfresco Transform Service (ATS), which provides a more balanced throughput.
 
-It is possible for an AMP (or a properties file) to set higher (numerically lower) priorities for new transformers than 
-the standard transformers, so that they are used rather than the standard ones.
+A T-Engine is intended to be run as a Docker image, but may also be run as a standalone process.
 
-The default transformer priority is 100. Priorities may be specified at the level of one mimetype to another and if a 
-new transformer returns false from its `isTransformable` method transformations will still fall back to the and JOD 
-transformer. The following are the priority properties for transformers that use the JOD transformer.
+Prior to Content Services 6.0 Legacy transformers ran within the same JVM as the Repository. They and their supporting 
+classes were deprecated in Content Services 6.0 and have now been removed. Content Services 6.2 still uses them if a 
+rendition cannot be created by the Transform Service or Local Transforms. The process of migrating custom legacy 
+transformers is described at the end of this page.
+
+One of the advantages of Custom Transforms and Renditions in Content Services 6.2 and above is that there is no longer any need for custom 
+Java code, Spring bean definitions, or alfresco properties to be applied to the Repository. Generally custom transforms 
+and renditions can now be added to Docker deployments without having to create or apply an AMP/JAR, or even restarting
+the repository.
+
+## Configure a T-Engine as a Local Transform
+For the repository to talk to a T-Engine, it must know the engine's URL. The URL can be added as an Alfresco global property,
+or more simply as a Java system property. `JAVA_OPTS` may be used to set this if starting the repository with Docker.
 
 ```text
-transformer.OpenOffice=3600000
-transformer.complex.OpenOffice.Image.time=3600000
-transformer.complex.OpenOffice.Pdf2swf.time=3600000
-transformer.complex.OpenOffice.PdfBox.time=3600000
+localTransform.<engineName>.url=
+```
 
-transformer.JodConverter.time=3600000
-transformer.complex.JodConverter.Image.time=3600000
-transformer.complex.JodConverter.Pdf2swf.time=3600000
-transformer.complex.JodConverter.PdfBox.time=3600000
+The `<engineName>` is a unique name of the T-Engine. For example, `localTransform.helloworld.url`. Typically a T-Engine
+contains a single transform or an associated group of transforms. Having set the URL to a T-Engine, the repository will 
+update its configuration by requesting the [T-Engine configuration](https://github.com/Alfresco/acs-packaging/blob/master/docs/creating-a-t-engine.md#t-engine-configuration){:target="_blank"} 
+on a periodical basis. It is requested more frequent on start up or if a communication or configuration problem has 
+occurred, and a less frequently otherwise.
+
+```text
+local.transform.service.cronExpression=4 30 0/1 * * ?
+local.transform.service.initialAndOnError.cronExpression=0/10 * * * * ?
 ```
 
-If an initial 'XXX.time' global property is supplied for a transformer, the number of transformations performed may 
-also be supplied with a '.count' value. The default being 10,000. This avoids the average time reducing too fast if 
-transformations are requested (because the new transformer is not available). A higher number ensures it reduces at a 
-slower rate. For example, 1,000,000:
+### Transformer selection strategy
+The repository will use the [T-Engine configuration](https://github.com/Alfresco/acs-packaging/blob/master/docs/creating-a-t-engine.md#t-engine-configuration){:target="_blank"} 
+to choose which T-Engine will perform a transform. A transformer definition contains a supported list of source and target 
+Media Types. This is used for the most basic selection. This is further refined by checking that the definition also 
+supports transform options (parameters) that have been supplied in a transform request or a Rendition Definition used
+in a rendition request. See [Configure a Custom Rendition](#configure-a-custom-rendition).
 
+```text
+Transformer 1 defines options: Op1, Op2
+Transformer 2 defines options: Op1, Op2, Op3, Op4
 ```
-transformer.OpenOffice.count=1000000
-transformer.complex.OpenOffice.Image.count=1000000
-transformer.complex.OpenOffice.Pdf2swf.count=1000000
-transformer.complex.OpenOffice.PdfBox.count=1000000
+```
+Rendition provides values for options: Op2, Op3
+```
+If we assume both transformers support the required source and target Media Types, Transformer 2 will be selected because 
+it knows about all the supplied options. The definition may also specify that some options are required or grouped.
 
-transformer.JodConverter.count=1000000
-transformer.complex.JodConverter.Image.count=1000000
-transformer.complex.JodConverter.Pdf2swf.count=1000000
-transformer.complex.JodConverter.PdfBox.count=1000000
+### Enabling and disabling Local or Transform Service transforms
+Local or Transform Service transforms can be enabled or disabled independently of each other. The repository will try to 
+transform content using the Transform Service if possible and falling back to a Local Transform. If you are using Share, 
+Local Transforms are required, as they support both synchronous and asynchronous requests. Share makes use of both, so
+functionality such as preview will be unavailable if Local transforms are disabled. The Transform service only supports 
+asynchronous requests.
+
+The following sections will show how to create a Local transform pipeline, a Local transform failover or a Local transform 
+override, but remember that they will not be used if the Transform Service (ATS) is able to do the transform and 
+is enabled.
+
+```text
+transform.service.enabled=true
+local.transform.service.enabled=true
 ```
 
-## Deployment - App Server
+Setting the enabled state to **false** will disable all of the transforms performed by that particular service. It is 
+possible to disable individual Local Transforms by setting the corresponding T-Engine URL property `localTransform.<engineName>.url` 
+value to an empty string.
 
-* `tomcat/shared/classes/alfresco/extension/subsystems/Transformers/default/default` - add a Spring context file with transformer bean definitions, file should have name that ends in -context.xml, such as `custom-transformers-context.xml`.
-* `tomcat/shared/classes/alfresco-global.properties` - all the properties configuration goes here
+```text
+localTransform.helloworld.url=
+```
 
-## Deployment All-in-One SDK project
+### Configure a custom Local transform pipeline
+Local Transforms may be combined together in a pipeline to form a new transform, where the output from one becomes the 
+input to the next and so on. A pipeline definition (JSON) defines the sequence of transforms and intermediate Media Types. 
+Like any other transformer, it specifies a list of supported source and target Media Types. If you don't supply any,
+all possible combinations are assumed to be available. The definition may reuse the `transformOptions` of transformers in the
+pipeline, but typically will define its own subset of these.  
 
-* `aio/platform-jar/src/main/resources/alfresco/module/platform-jar/context/service-context.xml` - Transformation bean definitions
-* `aio/platform-jar/src/main/resources/alfresco/module/platform-jar/alfresco-global.properties` - all the properties configuration goes here
+The following example begins with the `helloWorld` Transformer described in [Creating a T-Engine](#creating-a-t-engine), 
+which takes a text file containing a name and produces an HTML file with a Hello &lt;name> message in the body. This is 
+then transformed back into a text file. This example contains just one pipeline transformer, but many may be defined in 
+the same file.
 
-## Sample Code
+```json
+{
+  "transformers": [
+    {
+      "transformerName": "helloWorldText",
+      "transformerPipeline" : [
+        {"transformerName": "helloWorld", "targetMediaType": "text/html"},
+        {"transformerName": "html"}
+      ],
+      "supportedSourceAndTargetList": [
+        {"sourceMediaType": "text/plain", "priority": 45,  "targetMediaType": "text/plain" }
+      ],
+      "transformOptions": [
+        "helloWorldOptions"
+      ]
+    }
+  ]
+}
+```
 
-* [Content Transformer Sample Code](https://github.com/Alfresco/alfresco-sdk-samples/tree/alfresco-51/all-in-one/custom-content-transformer-repo){:target="_blank"}
+* `transformerName` - Try to create a unique name for the transform.
+* `transformerPipeline` - A list of transformers in the pipeline. The `targetMediaType` specifies the intermediate 
+Media Types between transformers. There is no final `targetMediaType` as this comes from the `supportedSourceAndTargetList`.
+* `supportedSourceAndTargetList` - The supported source and target Media Types, which refer to the Media Types this 
+pipeline transformer can transform from and to, additionally you can set the priority and the
+maxSourceSizeBytes see [Supported Source and Target List](https://github.com/Alfresco/alfresco-transform-core/blob/master/docs/engine_config.md#supported-source-and-target-list){:target="_blank"}.
+If blank, this indicates that all possible combinations are supported. This is the cartesian product of all source types to the first
+intermediate type and all target types from the last intermediate type. Any combinations supported by the first transformer are excluded. They
+will also have the priority from the first transform.
+* `transformOptions` - A list of references to options required by the pipeline transformer.
+
+Custom Pipeline definitions need to be placed in a directory of the Repository. The default location (below) may be 
+changed by resetting the following Alfresco global property.
+
+```text
+local.transform.pipeline.config.dir=shared/classes/alfresco/extension/transform/pipelines
+```
+On startup this location is checked every 10 seconds, but then switches to once an hour if successful. After a problem, 
+it tries every 10 seconds again. These are the same properties use to decide when to read T-Engine configurations, 
+because pipelines combine transformers in the T-Engines.
+
+```text
+local.transform.service.cronExpression=4 30 0/1 * * ?
+local.transform.service.initialAndOnError.cronExpression=0/10 * * * * ?
+```
+
+If you are using Docker Compose in development, you will need to copy
+your pipeline definition into your running Repository container.
+One way is to use the following command, and it will be picked up the
+next time the location is read, which is dependent on the cron values.
+
+```bash
+docker cp custom_pipelines.json <alfresco container>:/usr/local/tomcat/shared/classes/alfresco/extension/transform/pipelines/
+```
+
+In a Kubernetes environment, [ConfigMaps](https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/){:target="_blank"} 
+can be used to add pipeline definitions. You will need to create
+a ConfigMap from the JSON file and mount the ConfigMap through a volume
+to the Repository pods.
+
+```bash
+kubectl create configmap custom-pipeline-config --from-file=name_of_a_file.json
+```
+
+The necessary volumes are already provided out of the box and the files
+in ConfigMap `custom-pipeline-config` will be mounted to
+`/usr/local/tomcat/shared/classes/alfresco/extension/transform/pipelines/`.
+Again, the files will be picked up the next time the location is read,
+or when the repository pods are restarted.
+
+> From Kubernetes documentation: Caution: If there are some files in the mountPath location, they will be deleted.
+
+### Configure custom Local failover transforms
+A failover transform, simply provides a list of transforms to be
+attempted one after another until one succeeds. For example, you may have a fast transform that is able to handle a
+limited set of transforms and another that is slower but handles all cases.
+
+```json
+{
+  "transformers": [
+    {
+      "transformerName": "imgExtractOrImgCreate",
+      "transformerFailover" : [ "imgExtract", "imgCreate" ],
+      "supportedSourceAndTargetList": [
+        {"sourceMediaType": "application/vnd.oasis.opendocument.graphics", "priority": 150, "targetMediaType": "image/png" },
+        ...
+        {"sourceMediaType": "application/vnd.sun.xml.calc.template",       "priority": 150, "targetMediaType": "image/png" }
+      ]
+    }
+  ]
+}
+```
+* `transformerName` - Try to create a unique name for the transform.
+* `transformerFaillover` - A list of transformers to try.
+* `supportedSourceAndTargetList` - The supported source and target
+Media Types, which refer to the Media Types this failover transformer
+can transform from and to, additionally you can set the priority and the
+maxSourceSizeBytes see [Supported Source and Target List](https://github.com/Alfresco/alfresco-transform-core/blob/master/docs/engine_config.md#supported-source-and-target-list){:target="_blank"}.
+Unlike pipelines, it must not be blank.
+* `transformOptions` - A list of references to options required by
+the pipeline transformer.
+
+### Overriding a Local transform
+In the same way as it is possible to combine Local transforms into pipelines, it is also possible to override a
+previously defined transform in a file in the _local.transform.pipeline.config.dir_ directory. The last definition read
+wins. The configuration from T-Engines or the Transform Service is initially read followed by files in this directory.
+Files are read in alphanumeric order. So _0100-basePipelines.json_ is read before _0200-a-cutdown-libreoffice.json_. The
+following example removes most of the supported source to target media types form the standard _"libreoffice"_
+transform. This is not something you would normally want to do. It also changes the max size and priority of others.
+
+```json
+{
+  "transformers": [
+    {
+      "transformerName": "libreoffice",
+      "supportedSourceAndTargetList": [
+        {"sourceMediaType": "text/csv", "maxSourceSizeBytes": 1000, "targetMediaType": "text/html" },
+        {"sourceMediaType": "text/csv", "targetMediaType": "application/vnd.oasis.opendocument.spreadsheet" },
+        {"sourceMediaType": "text/csv", "targetMediaType": "application/vnd.oasis.opendocument.spreadsheet-template" },
+        {"sourceMediaType": "text/csv", "targetMediaType": "text/tab-separated-values" },
+        {"sourceMediaType": "text/csv", "priority": 45, "targetMediaType": "application/vnd.ms-excel" },
+        {"sourceMediaType": "text/csv", "priority": 155, "targetMediaType": "application/pdf" }
+      ]
+    }
+  ]
+}
+```
+
+### Configure a custom rendition {#configure-a-custom-rendition}
+Renditions are a representation of source content in another form. A
+Rendition Definition (JSON) defines the transform option (parameter)
+values that will be passed to a transformer and the target Media Type.
+
+```json
+{
+  "renditions": [
+    {
+      "renditionName": "helloWorld",
+      "targetMediaType": "text/html",
+      "options": [
+        {"name": "language", "value": "German"}
+      ]
+    }
+  ]
+}
+```
+* `renditionName` - A unique rendition name.
+* `targetMediaType` - The target Media Type for the rendition.
+* `options` - The list of transform option names and values
+corresponding to the transform options defined in
+[T-Engine configuration](https://github.com/Alfresco/acs-packaging/blob/master/docs/creating-a-t-engine.md#t-engine-configuration){:target="_blank"}.
+If you specify `sourceNodeRef` without a value,
+the system will automatically add the values at run time. 
+
+Just like Pipeline Definitions, custom Rendition Definitions need to be placed
+in a directory of the Repository. There are similar properties that
+control where and when these definitions are read and the same approach
+may be taken to get them into Docker Compose and Kubernetes environments.
+
+```text
+rendition.config.dir=shared/classes/alfresco/extension/transform/renditions/
+```
+```text
+rendition.config.cronExpression=2 30 0/1 * * ?
+rendition.config.initialAndOnError.cronExpression=0/10 * * * * ?
+```
+
+In a Kubernetes environment:
+
+```bash
+kubectl create configmap custom-rendition-config --from-file=name_of_a_file.json
+```
+
+The necessary volumes are already provided out of the box and the files
+in ConfigMap `custom-rendition-config` will be mounted to
+`/usr/local/tomcat/shared/classes/alfresco/extension/transform/renditions/`.
+Again, the files will be picked up the next time the location is read,
+or when the repository pods are restarted.
+
+#### Disabling an existing rendition
+Just like transforms, it is possible to override renditions. The following example effectively
+disables the `doclib` rendition, used to create the thumbnail images in Share's Document Library
+page and other client applications. A good name for this file might be
+`0200-disableDoclib.json`.
+
+```json
+{
+  "renditions": [
+    {
+      "renditionName": "doclib",
+      "targetMediaType": "image/png",
+      "options": [
+        {"name": "unsupported", "value": 123}
+      ]
+    }
+  ]
+}
+```
+
+Because there is not a transformer with an transform option called `unsupported`, the rendition
+can never be performed. Having turned on `TransformerDebug` logging you normally you would see a
+transform taking place for `-- doclib --` when you upload a file in Share. With this override the
+doclib transform does not appear.
+
+#### Overriding an existing rendition
+It is possible to change a rendition by overriding it. The following `0300-biggerThumbnails.json`
+file changes the size of the `doclib` image from `100x100` to be `123x123` and introduces another
+rendition called `biggerThumbnail` that is `200x200`.
+
+```json
+{
+  "renditions": [
+    {
+      "renditionName": "doclib",
+      "targetMediaType": "image/png",
+      "options": [
+        {"name": "resizeWidth", "value": 123},
+        {"name": "resizeHeight", "value": 123},
+        {"name": "allowEnlargement", "value": false},
+        {"name": "maintainAspectRatio", "value": true},
+        {"name": "autoOrient", "value": true},
+        {"name": "thumbnail", "value": true}
+      ]
+    },
+    {
+      "renditionName": "biggerThumbnail",
+      "targetMediaType": "image/png",
+      "options": [
+        {"name": "resizeWidth", "value": 200},
+        {"name": "resizeHeight", "value": 200},
+        {"name": "allowEnlargement", "value": false},
+        {"name": "maintainAspectRatio", "value": true},
+        {"name": "autoOrient", "value": true},
+        {"name": "thumbnail", "value": true}
+      ]
+    }
+  ]
+}
+```
+
+### Configure a custom MIME type
+Quite often the reason a custom transform is created is to convert to or
+from a MIME type (or Media type) that is not known to Content Services by default.
+Another reason is to introduce an application specific MIME type that
+indicates a specific use of a more general format such as XML or JSON. 
+From Content Services 6.2, it is possible add custom MIME types in a similar way to
+custom Pipelines and Renditions. The JSON format and properties are as
+follows:
+
+```json
+{
+  "mediaTypes": [
+    {
+      "name": "MPEG4 Audio",
+      "mediaType": "audio/mp4",
+      "extensions": [
+        {"extension": "m4a"}
+      ]
+    },
+    {
+      "name": "Plain Text",
+      "mediaType": "text/plain",
+      "text": true,
+      "extensions": [
+        {"extension": "txt", "default": true},
+        {"extension": "sql", "name": "SQL"},
+        {"extension": "properties", "name": "Java Properties"},
+        {"extension": "log", "name": "Log File"}
+      ]
+    }
+  ]
+}
+```
+
+* `name` Display name of the mimetype or file extension. Optional for extensions.
+* `mediaType` used to identify the content.
+* `text` optional value indicating if the mimetype is text based.
+* `extensions` a list of possible extensions.
+* `extension` the file extension.
+* `default` indicates the extension is the default one if there is more than one.
+
+```text
+mimetype.config.dir=shared/classes/alfresco/extension/mimetypes
+```
+```text
+mimetype.config.cronExpression=0 30 0/1 * * ?
+mimetype.config.initialAndOnError.cronExpression=0/10 * * * * ?
+```
+
+In a Kubernetes environment:
+
+```bash
+kubectl create configmap custom-mimetype-config --from-file=name_of_a_file.json
+```
+
+The necessary volumes are already provided out of the box and the files
+in ConfigMap `custom-mimetype-config` will be mounted to
+`/usr/local/tomcat/shared/classes/alfresco/extension/mimetypes`.
+Again, the files will be picked up the next time the location is read,
+or when the repository pods are restarted.
+
+### Configure the repository to use the Transform Service
+By default the Transform service is disabled by default, but Docker
+Compose and Kubernetes Helm Charts may enable it again by setting
+`transform.service.enabled`. The Transform Service handles
+communication with all its own T-Engines and builds up its own combined
+configuration JSON which is requested by the repository
+periodically.
+
+```text
+transform.service.cronExpression=4 30 0/1 * * ?
+transform.service.initialAndOnError.cronExpression=0/10 * * * * ?
+```
+
+## Creating a T-Engine {#creating-a-t-engine}
+The deployment and development of a T-Engine transformer is simpler
+than before.
+
+* Transformers no longer needs to be applied as AMPs/JARs on top of a repository.
+* New versions may be deployed separately without restarting the repository.
+* As a standalone Spring Boot application develop and test
+  cycles are reduced.
+* A base Spring Boot application is provided with hook points to extend
+  with custom transform code.
+* The base also includes the creation of a Docker image for your
+  Spring Boot application. Even if you don't intend to deploy with Docker,
+  this may still be of interest, as the configuration of any tools or
+  libraries used in the transform need only be done once rather than for
+  every development or ad-hoc test environment.
+
+### Developing a new T-Engine
+The process of developing a new T-Engine is described on the
+[Creating a T-Engine](https://github.com/Alfresco/acs-packaging/blob/master/docs/creating-a-t-engine.md){:target="_blank"} page. It walks
+through the steps involved in creating a simple Hello World transformer
+and includes commands to help test.
+
+When developing new Local Transformers it is generally a good idea to
+increase the frequency of the polling of the various locations that
+contain custom Pipeline, Rendition, Mimetype Definitions and also of
+the Transform Service.
+
+```text
+mimetype.config.cronExpression=0 0/1 * * * ?
+rendition.config.cronExpression=2 0/1 * * * ?
+local.transform.service.cronExpression=4 0/1 * * * ?
+transform.service.cronExpression=6 0/1 * * * ?
+```
+
+### Migrating a Legacy Transformer
+Content Services 6.2 is useful if you already have custom transformers based on the
+legacy approach, because it will allow you to gradually migrate them.
+Initially you will probably want to create new T-Engines but run them as
+Local Transformers attached directly to an repository. All of the
+transforms provided with the base Content Services are available as Local
+Transformers, so may be combined with your own Local
+Transformers in Local Pipelines. Once happy you have every thing working
+it then probably makes sense to add your new T-Engines to the Transform
+Service. The [Migrating a Legacy Transformer](https://github.com/Alfresco/acs-packaging/blob/master/docs/migrating-a-legacy-transformer.md){:target="_blank"} page
+helps by showing which areas of legacy code are no longer needed and
+which sections can be simply copied and pasted into the new code. Some of
+the concepts have changed sightly to simplify what the custom transform
+developer needs to do and understand.
+
+## Alfresco Transform Service (ATS) Configuration (ENTERPRISE)
+To configure a T-Engine as a Remote Transform follow the steps described in [Alfresco Transform Service Docs]({% link transform-service/latest/config/engine.md %}).
Index: content-services/latest/develop/repo-ext-points/content-transformers-renditions.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- content-services/latest/develop/repo-ext-points/content-transformers-renditions.md	(revision 8854db621287f954e232390afc689ea7bdbf0998)
+++ content-services/latest/develop/repo-ext-points/content-transformers-renditions.md	(revision ee62e11595b45486329fe8671e9f022a06bebffa)
@@ -198,7 +198,7 @@
 Media Types between transformers. There is no final `targetMediaType` as this comes from the `supportedSourceAndTargetList`.
 * `supportedSourceAndTargetList` - The supported source and target Media Types, which refer to the Media Types this 
 pipeline transformer can transform from and to, additionally you can set the priority and the
-maxSourceSizeBytes see [Supported Source and Target List](https://github.com/Alfresco/alfresco-transform-core/blob/master/docs/engine_config.md#supported-source-and-target-list).
+maxSourceSizeBytes see [Supported Source and Target List](https://github.com/Alfresco/alfresco-transform-core/blob/master/docs/engine_config.md#supported-source-and-target-list){:target="_blank"}.
 If blank, this indicates that all possible combinations are supported. This is the cartesian product of all source types to the first
 intermediate type and all target types from the last intermediate type. Any combinations supported by the first transformer are excluded. They
 will also have the priority from the first transform.
@@ -228,7 +228,7 @@
 docker cp custom_pipelines.json <alfresco container>:/usr/local/tomcat/shared/classes/alfresco/extension/transform/pipelines/
 ```
 
-In a Kubernetes environment, [ConfigMaps](https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/)
+In a Kubernetes environment, [ConfigMaps](https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/){:target="_blank"} 
 can be used to add pipeline definitions. You will need to create
 a ConfigMap from the JSON file and mount the ConfigMap through a volume
 to the Repository pods.
@@ -270,7 +270,7 @@
 * `supportedSourceAndTargetList` - The supported source and target
 Media Types, which refer to the Media Types this failover transformer
 can transform from and to, additionally you can set the priority and the
-maxSourceSizeBytes see [Supported Source and Target List](https://github.com/Alfresco/alfresco-transform-core/blob/master/docs/engine_config.md#supported-source-and-target-list).
+maxSourceSizeBytes see [Supported Source and Target List](https://github.com/Alfresco/alfresco-transform-core/blob/master/docs/engine_config.md#supported-source-and-target-list){:target="_blank"}.
 Unlike pipelines, it must not be blank.
 * `transformOptions` - A list of references to options required by
 the pipeline transformer.
@@ -487,12 +487,6 @@
 transform.service.initialAndOnError.cronExpression=0/10 * * * * ?
 ```
 
-## ATS Configuration
-Alfresco Transform Service configuration information.
-
-### Configure a T-Engine as a Remote Transform
-Please follow the steps described in [Alfresco Transform Service Docs](https://github.com/Alfresco/alfresco-transform-service/blob/master/docs/custom-t-engine.md).
-
 ## Creating a T-Engine {#creating-a-t-engine}
 The deployment and development of a T-Engine transformer is simpler
 than before.
@@ -541,3 +535,6 @@
 which sections can be simply copied and pasted into the new code. Some of
 the concepts have changed sightly to simplify what the custom transform
 developer needs to do and understand.
+
+## Alfresco Transform Service (ATS) Configuration (ENTERPRISE)
+To configure a T-Engine as a Remote Transform follow the steps described in [Alfresco Transform Service Docs]({% link transform-service/latest/config/engine.md %}).
Index: content-services/community/develop/repo-ext-points/metadata-extractors.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- content-services/community/develop/repo-ext-points/metadata-extractors.md	(revision ee62e11595b45486329fe8671e9f022a06bebffa)
+++ content-services/community/develop/repo-ext-points/metadata-extractors.md	(revision db02f804fb60804e4b03ce7db4985a32182e6670)
@@ -1,21 +1,22 @@
 ---
-title: Metadata Extractors Extension Point
+title: Metadata Extractors and Embedders Extension Point
 ---
 
-Community Edition performs metadata extraction on content automatically, however, you may wish to create 
+Content Services performs metadata extraction on content automatically, however, you may wish to create 
 custom metadata extractors to handle custom file properties and custom content models.
 
 Architecture Information: [Platform Architecture]({% link content-services/community/develop/software-architecture.md %}#platformarch)
 
-## Description
-
+## Introduction
 Every time a file is uploaded to the repository the file's MIME type is automatically detected. Based on the MIME type a 
 related Metadata Extractor is invoked on the file. It will extract common properties from the file, such as author, 
 and set the corresponding content model property accordingly. Each Metadata Extractor has a mapping between the 
-properties it can extract and the content model properties. Metadata extraction is primarily based on the 
-[Apache Tika](https://tika.apache.org/){:target="_blank"} library. This means that whatever [file formats](https://tika.apache.org/1.11/formats.html){:target="_blank"} 
-Tika can extract metadata from, Community Edition can also handle. To give you an idea of what file formats 
-Community Edition can extract metadata from, here is a list of the most common formats: 
+properties it can extract and the content model properties. 
+
+Metadata extraction is primarily based on the [Apache Tika](https://tika.apache.org/){:target="_blank"} library. This means 
+that whatever [file formats](https://tika.apache.org/1.11/formats.html){:target="_blank"} Tika can extract metadata from, 
+Content Services can also handle. To give you an idea of what file formats Content Services can extract metadata from, 
+here is a list of the most common formats: 
 
 * PDF
 * MS Office
@@ -43,147 +44,387 @@
 * *If it is an email file* -> `cm:emailed` (from, to, subject, sent date)
 
 One thing to note though, even if an extractor can extract any of the system controlled properties, such as created date, 
-it will not be used. Created date, creator, modified date, and modifier is always controlled by the Community Edition 
+it will not be used. Created date, creator, modified date, and modifier is always controlled by the Content Services 
 system, unless you are using the Bulk Import tool, in which case last modified date can be preserved.
 
+## Metadata extraction and Transform Engines
+The extraction of metadata in the repository is performed in T-Engines (transform engines).
+Prior to Content Services version 7, it was performed inside the repository. T-Engines provide improved scalability,
+stability, security and flexibility. New extractors may be added without the need for
+a new Content Services release or applying an AMP on top of the repository (i.e. `alfresco.war`).
+
+The Content Services version 6 framework for creating metadata extractors that run as part of the repository
+still exists, so existing AMPs that add extractors will still work as long as there is
+not an extractor in a T-Engine that claims to do the same task. The framework is *deprecated* and could
+well be removed in a future release.
+
+This page describes how metadata extraction and embedding works, so that it is possible to add a
+custom T-Engine to do other types. It also lists the various extractors that have been moved to T-Engines.
+
+A framework for embedding metadata into a file was provided as part of the repository prior to Content Services version 7. 
+This too still exists, but has been *deprecated*. Even though the content repository did not
+provide any out of the box implementations, the embedding framework of metadata via T-Engines exists.
+
+In the case of an extract, the T-Engine returns a JSON file that contains name value pairs. The names
+are fully qualified QNames of properties on the source node. The values are the metadata values extracted
+from the content. The transform defines the mapping of metadata values to properties. Once returned to
+the repository, the properties are automatically set.
+
+In the case of an embed, the T-Engine takes name value pairs from the transform options, maps them to
+metadata values which are then updated in the supplied content. The content is then returned to the 
+content repository and the node is updated. 
+
+## Metadata extraction is just another transform
+Metadata extractors and embedders are just a specialist form of transform. The `targetMediaType`
+in the T-Engine `engine-config.json` is set to `"alfresco-metadata-extract"` or `"alfresco-metadata-embed"`
+the following is a snippet from the 
+[tika_engine_config.json](https://github.com/Alfresco/alfresco-transform-core/blob/master/alfresco-transform-tika/alfresco-transform-tika/src/main/resources/tika_engine_config.json){:target="_blank"}
+
+```json
+    {
+      "transformerName": "TikaAudioMetadataExtractor",
+      "supportedSourceAndTargetList": [
+        {"sourceMediaType": "video/x-m4v",     "targetMediaType": "alfresco-metadata-extract"},
+        {"sourceMediaType": "audio/x-oggflac", "targetMediaType": "alfresco-metadata-extract"},
+        {"sourceMediaType": "application/mp4", "targetMediaType": "alfresco-metadata-extract"},
+        {"sourceMediaType": "audio/vorbis",    "targetMediaType": "alfresco-metadata-extract"},
+        {"sourceMediaType": "video/3gpp",      "targetMediaType": "alfresco-metadata-extract"},
+        {"sourceMediaType": "audio/x-flac",    "targetMediaType": "alfresco-metadata-extract"},
+        {"sourceMediaType": "video/3gpp2",     "targetMediaType": "alfresco-metadata-extract"},
+        {"sourceMediaType": "video/quicktime", "targetMediaType": "alfresco-metadata-extract"},
+        {"sourceMediaType": "audio/mp4",       "targetMediaType": "alfresco-metadata-extract"},
+        {"sourceMediaType": "video/mp4",       "targetMediaType": "alfresco-metadata-extract"}
+      ],
+      "transformOptions": [
+        "metadataOptions"
+      ]
+    },
+```
+
+If a T-Engine definition says it supports a metadata extract or embed, it will be used in preference
+to any extractor or embedder using the deprecated frameworks in the content repository.
+
+### Transform interface
+Code that transforms a specific document type in a T-Engine generally implements the 
+[Transformer](https://github.com/Alfresco/alfresco-transform-core/blob/master/alfresco-transformer-base/src/main/java/org/alfresco/transformer/executors/Transformer.java){:target="_blank"}
+interface. In addition to the `transform` method, `extractMetadata` and `embedMetadata` methods
+will be called depending on the target media type. The implementing class is called from the
+[transformImpl](https://github.com/Alfresco/alfresco-transform-core/blob/master/alfresco-transformer-base/src/main/java/org/alfresco/transformer/TransformController.java){:target="_blank"} 
+method of the controller class.
+
+```java
+default void transform(String transformName, String sourceMimetype, String targetMimetype,
+                       Map<String, String> transformOptions,
+                       File sourceFile, File targetFile) throws Exception {
+}
+
+default void extractMetadata(String transformName, String sourceMimetype, String targetMimetype,
+                             Map<String, String> transformOptions,
+                             File sourceFile, File targetFile) throws Exception {
+}
+
+default void embedMetadata(String transformName, String sourceMimetype, String targetMimetype,
+                           Map<String, String> transformOptions,
+                           File sourceFile, File targetFile) throws Exception {
+}
+```
+
+It is typical for the `extractMetadata` method to call another `extractMetadata` method on a sub class of
+`AbstractMetadataExtractor` as this class provides the bulk of the functionality needed to configure metadata extraction
+or embedding.
+
+```java
+    public void extractMetadata(String transformName, String sourceMimetype, String targetMimetype,
+                                Map<String, String> transformOptions,
+                                File sourceFile, File targetFile) throws Exception
+    {
+        AbstractMetadataExtractor extractor = ...
+        extractor.extractMetadata(sourceMimetype, transformOptions, sourceFile, targetFile);
+    }
+
+    // Similar code for embedMetadata
+```
+
+### AbstractMetadataExtractor base class
+The `AbstractMetadataExtractor` may be extended to perform metadata extract and embed tasks, by overriding two methods
+in the sub classes:
+
+```java
+    public abstract Map<String, Serializable> extractMetadata(String sourceMimetype, Map<String, String> transformOptions,
+                                                              File sourceFile) throws Exception;
+
+    public void embedMetadata(String sourceMimetype, String targetMimetype, Map<String, String> transformOptions,
+                              File sourceFile, File targetFile) throws Exception
+    {
+        // Default nothing, as embedding is not supported in most cases
+    }
+```
+
+Method parameters:
+
+* `sourceMimetype` mimetype of the source
+* `transformOptions` transform options from the client
+* `sourceFile` the source as a file
+
+The `extractMetadata` should extract and return ALL available metadata from the `sourceFile`.
+These values are then mapped into content repository property names and values, depending on what is defined in a 
+`<classname>_metadata_extract.properties` file. Value may be discarded or a single value may even be used for multiple 
+properties. The selected values are sent back to the repository as JSON as a mapping of fully qualified 
+content model property names to values, where the values are applied to the source node.
+
+### Metadata extraction configuration
+The `AbstractMetadataExtractor` class reads the `<classname>_metadata_extract.properties` file, so that it knows how to
+map metadata returned from the sub class `extractMetadata` method onto content model properties. The following is
+an example for an email (file extension `.eml`):
+
+```text
+#
+# RFC822MetadataExtractor - default mapping
+#
+
+# Namespaces
+namespace.prefix.imap=http://www.alfresco.org/model/imap/1.0
+namespace.prefix.cm=http://www.alfresco.org/model/content/1.0
+
+# Mappings
+messageFrom=imap:messageFrom, cm:originator
+messageTo=imap:messageTo, cm:addressee
+messageCc=imap:messageCc, cm:addressees
+messageSubject=imap:messageSubject, cm:title, cm:description, cm:subjectline
+messageSent=imap:dateSent, cm:sentdate
+messageReceived=imap:dateReceived
+Thread-Index=imap:threadIndex
+Message-ID=imap:messageId
+```
+
+As can be seen, the email's metadata for `messageFrom` (if available) will be used to set two properties in the content
+repository (if they exist): `imap:messageFrom`, `cm:originator`. The property names use namespace prefixes specified above.
+
+### Property overwrite policy
+It is possible to specify if properties in the repository will be set if the extracted values are not null or if
+the properties already have a value. By default, `PRAGMATIC` is used. Generally you will not need to change this.
+Other values (`CAUTIOUS`, `EAGER`, `PRUDENT`) are described in 
+[OverwritePolicy](https://github.com/Alfresco/alfresco-community-repo/blob/master/repository/src/main/java/org/alfresco/repo/content/metadata/MetadataExtracter.java#L70-L318){:target="_blank"}.
+To use a different policy add a `sys:overwritePolicy` value to the Map returned from
+the `extractMetadata` method of the class extending `AbstractMetadataExtractor` (described above).
+
+The following table shows which conditions must be met for overwriting the value:
+
+![overwrite-policy]({% link content-services/images/overwrite-policy.png %})
+
+### Aspect property policy
+When a property is extracted, which is part of an aspect, it is possible to remove all other
+properties in the same aspect that do not have an extracted value. In this way only extracted values will be set and
+any previously set aspect properties will be cleared. By default, this does not take place and newly extracted values
+are just added to the node's properties. To clear other aspect properties add `sys:carryAspectProperties`= `false` to
+the Map returned from the `extractMetadata` method.
+
+### Enable tagging
+When an extracted property is taggable, it is possible to automatically extract tags from the value. By default, this is
+disabled, but may be enabled by adding `sys:enableStringTagging`= `true` to the Map returned from the `extractMetadata` method.
+
+Assuming `enableStringTagging` is `true`, it is also possible to change the default separators of the tags in the value.
+The default separators are `,` `;` and `\|`. This is done by adding a `sys:stringTaggingSeparators` value to the Map
+returned from the `extractMetadata` method. Please note that escaping of characters takes place in both Java and json,
+so json response would look like `"sys:stringTaggingSeparators": ";,\",\",\\|"` if the code explicitly sets the default
+separators.
+
+### Overriding metadata extraction request in the repository
+The request from the repository to extract metadata goes through `RenditionService2`, so will use the 
+asynchronous Alfresco Transform Service if available and a synchronous Local transform if not.
+
+Normally the only transform options are `timeout` and `sourceEncoding`, so the extractor code only has the source mimetype
+and content itself to work on. Customisation of the property mapping should really be done in the T-Engine as described above.
+
+However, it is currently possible for code running in the repository (i.e. `alfresco.war`) to override the default mapping 
+of metadata to content model properties, with an `extractMapping` transform option. This approach is *deprecated* and may 
+be removed in a future minor Content Services 7.x release. 
+
+An AMP should supply a class that implements the `MetadataExtractorPropertyMappingOverride` interface and add it to the 
+`metadataExtractorPropertyMappingOverrides` property of the `extractor.Asynchronous` spring bean.
+
+```java
+/**
+ * Overrides the default metadata mappings for PDF documents:
+ *
+ * <pre>
+ * author=cm:author
+ * title=cm:title
+ * subject=cm:description
+ * created=cm:created
+ * </pre>
+ * with:
+ * <pre>
+ * author=cm:author
+ * title=cm:title,cm:description
+ * </pre>
+ */
+public class PdfMetadataExtractorOverride implements MetadataExtractorPropertyMappingOverride {
+    @Override
+    public boolean match(String sourceMimetype) {
+        return MIMETYPE_PDF.equals(sourceMimetype);
+    }
+
+    @Override
+    public Map<String, Set<String>> getExtractMapping(NodeRef nodeRef) {
+        Map<String, Set<String>> mapping = new HashMap<>();
+        mapping.put("author", Collections.singleton("{http://www.alfresco.org/model/content/1.0}author"));
+        mapping.put("title",  Set.of("{http://www.alfresco.org/model/content/1.0}title",
+                                     "{http://www.alfresco.org/model/content/1.0}description"));
+        return mapping;
+    }
+}
+```
+
+Resulting in a request that contains the following transform options:
+
+```json
+{"extractMapping":{
+   "author":["{http://www.alfresco.org/model/content/1.0}author"],
+   "title":["{http://www.alfresco.org/model/content/1.0}title",
+            "{http://www.alfresco.org/model/content/1.0}description"]},
+ "timeout":20000,
+ "sourceEncoding":"UTF-8"}
+```
+
+### Metadata extraction response
+The transformed content that is returned to the repository is JSON and specifies what properties that should be updated 
+on the source node. For example:
+
+```json
+{"{http://www.alfresco.org/model/content/1.0}description":"Making Bread",
+ "{http://www.alfresco.org/model/content/1.0}title":"Making Bread",
+ "{http://www.alfresco.org/model/content/1.0}author":"Fred"}
+```
+
+### Metadata embed request
+An embed request simply contains a transform option called `metadata` that contains a map of property names to
+values, resulting in transform options like the following:
+
+```json
+{"metadata":
+ {"{http://www.alfresco.org/model/content/1.0}author":"Fred",
+  "{http://www.alfresco.org/model/content/1.0}title":"Making Bread"
+  "{http://www.alfresco.org/model/content/1.0}helpers":["Jane","Paul"]},
+ "timeout":20000,
+ "sourceEncoding":"UTF-8"}
+```
+
+Values are either a String, or a Collection of Strings. The mappings of these content repository
+properties to metadata properties is normally the reverse of those defined in the
+`<classname>_metadata_extract.properties` file in the T-Engine.
+
+### Metadata embed response
+This is simply the source content with the metadata embedded. The content repository updates
+the content of the node with what is returned.
+
+## Repository information
+The repository still contains metadata extraction code.
+
+### Framework
+The Content Services version 6 framework for running metadata extractors and embedders still exists. An additional 
+`AsynchronousExtractor` has been added to communicate with the `RenditionService2` from Content Services version 7. 
+The `AsynchronousExtractor` handles the request and response in a generic way allowing all the content type specific 
+code to be moved to a T-Engine.
+
+### XML framework {#xmlextractors}
+The following XML based extractors have NOT been removed from the content repository as custom extensions may be
+using them. There are no out-of-the-box extractors that use them as part of the repository. Ideally any
+custom extensions should be moved to a custom T-Engine using code based on these classes.
+
+* [XmlMetadataExtracter](https://github.com/Alfresco/alfresco-community-repo/blob/master/repository/src/main/java/org/alfresco/repo/content/metadata/xml/XmlMetadataExtracter.java){:target="_blank"} 
+* [XPathMetadataExtracter](https://github.com/Alfresco/alfresco-community-repo/blob/master/repository/src/main/java/org/alfresco/repo/content/metadata/xml/XPathMetadataExtracter.java){:target="_blank"}
+
+## Metadata extractors that have be moved to T-Engines {#ootbextractors}
+The following extractors, and their configuration (i.e. property mappings), exist now in T-Engines rather than in the 
+repository (i.e. `alfresco.war`):
+
+* [OfficeMetadataExtractor](https://github.com/Alfresco/alfresco-transform-core/blob/master/alfresco-transform-tika/alfresco-transform-tika/src/main/java/org/alfresco/transformer/metadataExtractors/OfficeMetadataExtractor.java){:target="_blank"} with [configuration](https://github.com/Alfresco/alfresco-transform-core/blob/master/alfresco-transform-tika/alfresco-transform-tika/src/main/resources/OfficeMetadataExtractor_metadata_extract.properties){:target="_blank"}
+* [TikaAutoMetadataExtractor](https://github.com/Alfresco/alfresco-transform-core/blob/master/alfresco-transform-tika/alfresco-transform-tika/src/main/java/org/alfresco/transformer/metadataExtractors/TikaAutoMetadataExtractor.java){:target="_blank"} with [configuration](https://github.com/Alfresco/alfresco-transform-core/blob/master/alfresco-transform-tika/alfresco-transform-tika/src/main/resources/TikaAutoMetadataExtractor_metadata_extract.properties){:target="_blank"}
+* [DWGMetadataExtractor](https://github.com/Alfresco/alfresco-transform-core/blob/master/alfresco-transform-tika/alfresco-transform-tika/src/main/java/org/alfresco/transformer/metadataExtractors/DWGMetadataExtractor.java){:target="_blank"} with [configuration](https://github.com/Alfresco/alfresco-transform-core/blob/master/alfresco-transform-tika/alfresco-transform-tika/src/main/resources/DWGMetadataExtractor_metadata_extract.properties){:target="_blank"}
+* [OpenDocumentMetadataExtractor](https://github.com/Alfresco/alfresco-transform-core/blob/master/alfresco-transform-tika/alfresco-transform-tika/src/main/java/org/alfresco/transformer/metadataExtractors/OpenDocumentMetadataExtractor.java){:target="_blank"} with [configuration](https://github.com/Alfresco/alfresco-transform-core/blob/master/alfresco-transform-tika/alfresco-transform-tika/src/main/resources/OpenDocumentMetadataExtractor_metadata_extract.properties){:target="_blank"}
+* [PdfBoxMetadataExtractor](https://github.com/Alfresco/alfresco-transform-core/blob/master/alfresco-transform-tika/alfresco-transform-tika/src/main/java/org/alfresco/transformer/metadataExtractors/PdfBoxMetadataExtractor.java){:target="_blank"} with [configuration](https://github.com/Alfresco/alfresco-transform-core/blob/master/alfresco-transform-tika/alfresco-transform-tika/src/main/resources/PdfBoxMetadataExtractor_metadata_extract.properties){:target="_blank"}
+* [MailMetadataExtractor](https://github.com/Alfresco/alfresco-transform-core/blob/master/alfresco-transform-tika/alfresco-transform-tika/src/main/java/org/alfresco/transformer/metadataExtractors/MailMetadataExtractor.java){:target="_blank"} with [configuration](https://github.com/Alfresco/alfresco-transform-core/blob/master/alfresco-transform-tika/alfresco-transform-tika/src/main/resources/MailMetadataExtractor_metadata_extract.properties){:target="_blank"}
+* [PoiMetadataExtractor](https://github.com/Alfresco/alfresco-transform-core/blob/master/alfresco-transform-tika/alfresco-transform-tika/src/main/java/org/alfresco/transformer/metadataExtractors/PoiMetadataExtractor.java){:target="_blank"} with [configuration](https://github.com/Alfresco/alfresco-transform-core/blob/master/alfresco-transform-tika/alfresco-transform-tika/src/main/resources/PoiMetadataExtractor_metadata_extract.properties){:target="_blank"}
+* [TikaAudioMetadataExtractor](https://github.com/Alfresco/alfresco-transform-core/blob/master/alfresco-transform-tika/alfresco-transform-tika/src/main/java/org/alfresco/transformer/metadataExtractors/TikaAudioMetadataExtractor.java){:target="_blank"} with [configuration](https://github.com/Alfresco/alfresco-transform-core/blob/master/alfresco-transform-tika/alfresco-transform-tika/src/main/resources/TikaAudioMetadataExtractor_metadata_extract.properties){:target="_blank"}
+* [MP3MetadataExtractor](https://github.com/Alfresco/alfresco-transform-core/blob/master/alfresco-transform-tika/alfresco-transform-tika/src/main/java/org/alfresco/transformer/metadataExtractors/MP3MetadataExtractor.java){:target="_blank"} with [configuration](https://github.com/Alfresco/alfresco-transform-core/blob/master/alfresco-transform-tika/alfresco-transform-tika/src/main/resources/MP3MetadataExtractor_metadata_extract.properties){:target="_blank"}
+* [HtmlMetadataExtractor](https://github.com/Alfresco/alfresco-transform-core/blob/master/alfresco-transform-misc/alfresco-transform-misc/src/main/java/org/alfresco/transformer/metadataExtractors/HtmlMetadataExtractor.java){:target="_blank"} with [configuration](https://github.com/Alfresco/alfresco-transform-core/blob/master/alfresco-transform-misc/alfresco-transform-misc/src/main/resources/HtmlMetadataExtractor_metadata_extract.properties){:target="_blank"}
+* [RFC822MetadataExtractor](https://github.com/Alfresco/alfresco-transform-core/blob/master/alfresco-transform-misc/alfresco-transform-misc/src/main/java/org/alfresco/transformer/metadataExtractors/RFC822MetadataExtractor.java){:target="_blank"} with [configuration](https://github.com/Alfresco/alfresco-transform-core/blob/master/alfresco-transform-misc/alfresco-transform-misc/src/main/resources/RFC822MetadataExtractor_metadata_extract.properties){:target="_blank"}
+
+The `LibreOffice` extractor has also been moved to a T-Engine, even though Tika based extractors are now used for all
+types it supported. This has been the case since ACS 6.0.1. It was moved into a T-Engine to simplify 
+moving any custom code that may have extended it.
+
+The `Tika` based classes for extractors using configuration files or spring context files have been removed from the 
+repository as the preferred way to create extractors is via a T-Engine and these approaches require in process
+extensions.
+
+## Changing default property mappings for PDF metadata extraction
 A common requirement is to be able to change the mapping of out-of-the-box properties, such as having the `subject` 
-property mapped to `cm:title` instead of `cm:description`. This is quite easy to achieve, just override the out-of-the-box 
-bean and re-configure the mapping. The out-of-the-box Spring bean definitions for Metadata Extractors can be found in the 
-`content-services-context.xml` file, which is located [here](https://github.com/Alfresco/community-edition/tree/master/projects/repository/config/alfresco){:target="_blank"}. 
-Search for "Content Metadata Extractors" in the file and then you will find an ordered list of extractor definitions.
+property mapped to `cm:title` instead of `cm:description` for a PDF file. This is quite easy to achieve, just override 
+the out-of-the-box JSON configuration and re-configure the mapping. The out-of-the-box definitions for Metadata Extractors 
+can be found in the places described in the [above section](#ootbextractors).
 
-When overriding a Metadata Extractor configuration you have the option to inherit the default properties mapping or 
-define a new one from scratch. For example, to change the `subject` property so it is mapped to content model property 
-`cm:title` for PDF files re-define the `extracter.PDFBox` Spring bean as follows:
+To change the `subject` property so it is mapped to content model property `cm:title` for PDF files re-define the 
+`PdfBoxMetadataExtractor_metadata_extract.properties` configuration as follows:
 
-```xml
-<bean id="extracter.PDFBox" class="org.alfresco.repo.content.metadata.PdfBoxMetadataExtracter"        
-    parent="baseMetadataExtracter">
-  <property name="documentSelector" ref="pdfBoxEmbededDocumentSelector" />
-  <property name="inheritDefaultMapping">
-      <value>false</value>
-  </property>
-  <property name="mappingProperties">
-      <props>
-          <prop key="namespace.prefix.cm">http://www.alfresco.org/model/content/1.0</prop>
-          <prop key="author">cm:author</prop>
-          <prop key="subject">cm:title</prop>
-          <prop key="Keywords">cm:description</prop>
-      </props>
-  </property>
-</bean>
+```text
+#
+# PdfBoxMetadataExtracter - custom mapping
+#
+
+# Namespaces
+namespace.prefix.cm=http://www.alfresco.org/model/content/1.0
+
+# Mappings
+author=cm:author
+title=cm:title
+subject=cm:title
 ```
 
-In this case you also map the `author` property. This is because when you set the `inheritDefaultMapping` property to 
-`false` all the default property mappings are not used. Another property called `Keywords` have also been mapped to the 
-`cm:description` property. Note that all the namespaces that the content model properties belong to have to be specified 
+Note that all the namespaces that the content model properties belong to have to be specified 
 as in the above example with `namespace.prefix.cm`. It is also very important to know that the property names are 
-case sensitive. So if the Keyword property had been written with a lower-case `k`, it would not have been picked up. 
-Sometimes it can be useful to know what metadata extractor that is actually used when you upload a document. Turning on 
-Metadata Extraction logging is a good idea to get on top of what is happening. 
+case sensitive. 
+
+## Metadata extraction debug logging
+Sometimes it can be useful to know what metadata extractor that is actually used when you upload a 
+document. Turning on Metadata Extraction logging is a good idea to get on top of what is happening. 
 Set the following property in `log4j.properties`:
 
 ```text
 log4j.logger.org.alfresco.repo.content.metadata=DEBUG
 ```
 
-With logging turned on the following information will be logged when uploading a PDF:
-
-```text
- 2015-12-07 13:56:51,324  DEBUG [content.metadata.MetadataExtracterRegistry] [http-bio-8080-exec-14] Get extractors for application/pdf
-2015-12-07 13:56:51,324  DEBUG [content.metadata.MetadataExtracterRegistry] [http-bio-8080-exec-14] Finding extractors for application/pdf
-2015-12-07 13:56:51,326  DEBUG [content.metadata.MetadataExtracterRegistry] [http-bio-8080-exec-14] Find supported:   extracter.TikaAuto
-2015-12-07 13:56:51,326  DEBUG [content.metadata.MetadataExtracterRegistry] [http-bio-8080-exec-14] Find supported:   extracter.PDFBox
-2015-12-07 13:56:51,326  DEBUG [content.metadata.MetadataExtracterRegistry] [http-bio-8080-exec-14] Find unsupported: extracter.Poi
-2015-12-07 13:56:51,326  DEBUG [content.metadata.MetadataExtracterRegistry] [http-bio-8080-exec-14] Find unsupported: extracter.Office
-2015-12-07 13:56:51,327  DEBUG [content.metadata.MetadataExtracterRegistry] [http-bio-8080-exec-14] Find unsupported: extracter.Mail
-2015-12-07 13:56:51,327  DEBUG [content.metadata.MetadataExtracterRegistry] [http-bio-8080-exec-14] Find unsupported: extracter.Html
-2015-12-07 13:56:51,327  DEBUG [content.metadata.MetadataExtracterRegistry] [http-bio-8080-exec-14] Find unsupported: extracter.OpenDocument
-2015-12-07 13:56:51,327  DEBUG [content.metadata.MetadataExtracterRegistry] [http-bio-8080-exec-14] Find unsupported: extracter.DWG
-2015-12-07 13:56:51,327  DEBUG [content.metadata.MetadataExtracterRegistry] [http-bio-8080-exec-14] Find unsupported: extracter.RFC822
-2015-12-07 13:56:51,327  DEBUG [content.metadata.MetadataExtracterRegistry] [http-bio-8080-exec-14] Find unsupported: extracter.MP3
-2015-12-07 13:56:51,327  DEBUG [content.metadata.MetadataExtracterRegistry] [http-bio-8080-exec-14] Find unsupported: extracter.Audio
-2015-12-07 13:56:51,327  DEBUG [content.metadata.MetadataExtracterRegistry] [http-bio-8080-exec-14] Find unsupported: extracter.OpenOffice
-2015-12-07 13:56:51,327  DEBUG [content.metadata.MetadataExtracterRegistry] [http-bio-8080-exec-14] Find unsupported: org.alfresco.tutorial.metadataextracter.xml.AcmeDocXMLMetadataExtracter
-2015-12-07 13:56:51,327  DEBUG [content.metadata.MetadataExtracterRegistry] [http-bio-8080-exec-14] Find returning:   [org.alfresco.repo.content.metadata.TikaAutoMetadataExtracter@763b7315, org.alfresco.repo.content.metadata.PdfBoxMetadataExtracter@6acadc76]
-2015-12-07 13:56:51,327  DEBUG [content.metadata.MetadataExtracterRegistry] [http-bio-8080-exec-14] Get supported:   extracter.TikaAuto
-2015-12-07 13:56:51,327  DEBUG [content.metadata.MetadataExtracterRegistry] [http-bio-8080-exec-14] Get supported:   extracter.PDFBox
-2015-12-07 13:56:51,327  DEBUG [content.metadata.MetadataExtracterRegistry] [http-bio-8080-exec-14] Get returning:   extracter.PDFBox
-```
-
-You can clearly see that the PDFBox extractor is invoked so you know you have customized the correct one. What about the 
-properties? It is likely that you will struggle to figure out what properties are extracted and their names. You can 
-have this logged with the following log file configuration:
+
+What about the properties? It is likely that you will struggle to figure out what properties are extracted and their names. 
+You can have this logged with the following log file configuration:
 
 ```text
 log4j.logger.org.alfresco.repo.content.metadata.AbstractMappingMetadataExtracter=DEBUG
 ```
 
 This log configuration is set to some other log level out-of-the-box so you need to specifically re-configure it to be 
-able to see something. Now when running you will also see the extracted doc properties as in the following example:
+able to see something. Now when running you will also see the extracted doc properties.
 
-```text
-Found: {
-   pdf:PDFVersion=1.4, 
-   xmp:CreatorTool=Writer, 
-   Keywords=SomeKeyword1, SomeKeyword2, 
-   subject=SomeSubject, 
-   dc:creator=Martin Bergljung, 
-   description=SomeSubject, 
-   dcterms:created=2015-12-07T14:22:15Z, 
-   dc:format=application/pdf; version=1.4, 
-   title=SomeTitle, 
-   dc:title=SomeTitle, 
-   pdf:encrypted=false, 
-   cp:subject=SomeSubject, 
-   Content-Type=application/pdf, 
-   creator=Martin Bergljung, 
-   comments=null, 
-   meta:author=Martin Bergljung, 
-   dc:subject=SomeKeyword1, SomeKeyword2, 
-   meta:creation-date=2015-12-07T14:22:15Z, 
-   created=2015-12-07T14:22:15Z, 
-   author=Martin Bergljung, 
-   xmpTPg:NPages=1, 
-   Creation-Date=2015-12-07T14:22:15Z, 
-   meta:keyword=SomeKeyword1, SomeKeyword2, 
-   Author=Martin Bergljung, producer=LibreOffice 4.2
-}
-```
-
-There is also a log entry with information about what properties that were actually successfully mapped:
-
-```text
-Mapped and Accepted: {
-   {http://www.alfresco.org/model/content/1.0}description={en_GB=SomeKeyword1, SomeKeyword2}, 
-   {http://www.alfresco.org/model/content/1.0}title={en_GB=SomeSubject}, 
-   {http://www.alfresco.org/model/content/1.0}author=Martin Bergljung}
-
-```
-
+## Using custom content models in property mappings for PDF metadata extraction
 Next requirement is most likely to map properties to custom content models. There is an ACME content model tutorial 
 where the base document type has an `acme:documentId` property. You might want to add a document identifier to the PDFs 
-you are uploading and have it automatically set in the ACME content model. Start by updating the extractor configuration 
-as follows:
+you are uploading and have it automatically set in the ACME content model. Start by updating the the 
+`PdfBoxMetadataExtractor_metadata_extract.properties` configuration as follows:
+ 
+```text
+#
+# PdfBoxMetadataExtracter - custom mapping
+#
 
-```xml
-<bean id="extracter.PDFBox" class="org.alfresco.repo.content.metadata.PdfBoxMetadataExtracter"
-       parent="baseMetadataExtracter">
-     <property name="documentSelector" ref="pdfBoxEmbededDocumentSelector" />
-     <property name="inheritDefaultMapping">
-         <value>false</value>
-     </property>
-     <property name="mappingProperties">
-         <props>
-             <prop key="namespace.prefix.cm">http://www.alfresco.org/model/content/1.0</prop>
-             <prop key="namespace.prefix.acme">http://www.acme.org/model/content/1.0</prop>
-             <prop key="author">cm:author</prop>
-             <prop key="subject">cm:title</prop>
-             <prop key="Keywords">cm:description</prop>
-             <prop key="DocumentId">acme:documentId</prop>
-         </props>
-     </property>
- </bean>
+# Namespaces
+namespace.prefix.cm=http://www.alfresco.org/model/content/1.0
+namespace.prefix.acme=http://www.acme.org/model/content/1.0
+
+# Mappings
+author=cm:author
+title=cm:title
+DocumentId=acme:documentId
 ```
 
 Here the custom document property `DocumentId` has been added so it is mapped to the ACME content model property 
@@ -191,8 +432,11 @@
 to have a rule on the folder that applies the `acme:document` type to any PDF document uploaded to the folder. This 
 type has the `acme:docuementId` property.
 
+## Changing default property mappings for XML metadata extraction
 Now, what if you would like to extract metadata from an XML file, how would you go about that? This can be achieved with 
 the `XmlMetadataExtracter`, which in-turn uses the `XPathMetadataExtracter` to navigate the XML and extract metadata. 
+These extractors are still in the repository, see this [section](#xmlextractors).
+
 Let's say we had XML files looking like this:
 
 ```xml
@@ -213,7 +457,7 @@
 
 And whenever we upload one we want to have the `/doc/@id` attribute set as `acme:documentId`, `/doc/project/number` 
 set as `acme:projectNumber`, and `/doc/securityClassification` set as `acme:securityClassification`. This will require 
-configuration like this, note these are new bean definitions, no overrides as in previous examples:
+configuration like this, note these are new bean definitions, no overrides:
 
 ```xml
 <bean id="org.alfresco.tutorial.metadataextracter.xml.AcmeDocXPathMetadataExtracter"
@@ -291,7 +535,6 @@
 ```
 
 ## Metadata extractor limits
-
 Metadata extraction limits allows configurations on `AbstractMappingMetadataExtracter` for:
 
 * control of the maximum time allowed for an extraction
@@ -301,7 +544,7 @@
 The default values for each of these properties are `MAX` value specified in the java code. These limits are configured 
 per extractor and mimetype.
 
-The limits configured for Community Edition are:
+The limits configured for Content Services are:
 
 ```text
 Time out configured for all extractor and all mimetypes
@@ -314,45 +557,14 @@
 content.metadataExtracter.pdf.maxConcurrentExtractionsCount=5
 ```
 
-## PDF metadata extractor overwrite policy
-
-There are four types of overwrite policies that can be used when extracting metadata:
+## Deployment
+For XML metadata extraction you will still use the [SDK]({% link content-services/community/develop/sdk.md %}) and a 
+JAR project applied to the Repository (i.e. `alfresco.war`).
+ 
+To change the configuration for the majority of the metadata extractors you will have to generate a new 
+Transform Core AIO Docker image with the new configuration. Another option would be to 
+[create a new separate T-Engine](https://github.com/Alfresco/acs-packaging/blob/master/docs/creating-a-t-engine.md){:target="_blank"} 
+that has a higher priority (lower number) for this metadata extraction. That way you can still use the standard T-Engine 
+and the new one from for this one special case. 
 
-* `EAGER`
-* `CAUTIOUS`
-* `PRUDENT`
-* `PRAGMATIC`
 
-The following table shows which conditions must be met for overwriting the value:
-
-![overwrite-policy]({% link content-services/images/overwrite-policy.png %})
-
-The default overwrite policy is `PRAGMATIC`. To change the overwrite policy, set the `overwritePolicy` property. For example:
-
-```xml
-<property name="overwritePolicy"> <value>EAGER</value> </property>
-```
-
-To change the overwrite policy for the PDF metadata extractor, set the `overwritePolicy` property in the 
-`alfresco-global.properties`. For example:
-
-```text
-content.metadataExtracter.pdf.overwritePolicy=EAGER
-```
-
-## Deployment - App Server
-
-* `tomcat/shared/classes/alfresco/extension` - change name of `custom-metadata-extractors-context.xml.sample` to `custom-metadata-extractors-context.xml` and define extractor beans. Change name of `metadata-embedding-context.xml.sample` to `metadata-embedding-context.xml` and make embedder bean definitions.
-
-## Deployment All-in-One SDK project
-
-* `aio/platform-jar/src/main/resources/alfresco/module/platform-jar/context/service-context.xml` - Metadata Extractor bean definitions and metadata embedder bean definitions
-* `aio/platform-jar/src/main/resources/alfresco/module/platform-jar/metadataextraction` - Properties files with mappings
-
-## Sample Code
-
-* [PDF metadata extraction sample and XML metadata extraction sample](https://github.com/Alfresco/alfresco-sdk-samples/tree/alfresco-51/all-in-one/custom-metadata-extracter-repo){:target="_blank"}
-
-## Tutorials
-
-* [Configure Metadata Extraction]({% link content-services/community/config/repository.md %}#configure-metadata-extraction)
Index: content-services/latest/develop/repo-ext-points/metadata-extractors.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- content-services/latest/develop/repo-ext-points/metadata-extractors.md	(revision ee62e11595b45486329fe8671e9f022a06bebffa)
+++ content-services/latest/develop/repo-ext-points/metadata-extractors.md	(revision 437759a08b8505abf11d7e0386132dfc6a0f5f40)
@@ -109,7 +109,8 @@
 [Transformer](https://github.com/Alfresco/alfresco-transform-core/blob/master/alfresco-transformer-base/src/main/java/org/alfresco/transformer/executors/Transformer.java){:target="_blank"}
 interface. In addition to the `transform` method, `extractMetadata` and `embedMetadata` methods
 will be called depending on the target media type. The implementing class is called from the
-[transformImpl](creating-a-t-engine.md#transformImpl) method of the controller class.
+[transformImpl](https://github.com/Alfresco/alfresco-transform-core/blob/master/alfresco-transformer-base/src/main/java/org/alfresco/transformer/TransformController.java){:target="_blank"}                 
+method of the controller class.
 
 ```java
 default void transform(String transformName, String sourceMimetype, String targetMimetype,
Index: _data/toc/content-services.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- _data/toc/content-services.yaml	(revision 437759a08b8505abf11d7e0386132dfc6a0f5f40)
+++ _data/toc/content-services.yaml	(revision db02f804fb60804e4b03ce7db4985a32182e6670)
@@ -333,8 +333,6 @@
           path: '/content-services/community/config/file-servers/'
         - title: 'Email'
           path: '/content-services/community/config/email/'
-        - title: 'LibreOffice'
-          path: '/content-services/community/config/libreoffice/'
         - title: 'ActiveMQ'
           path: '/content-services/community/config/activemq/'
         - title: 'Smart Folders'
Index: content-services/community/admin/metadata-extraction.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- content-services/community/admin/metadata-extraction.md	(revision 437759a08b8505abf11d7e0386132dfc6a0f5f40)
+++ content-services/community/admin/metadata-extraction.md	(revision db02f804fb60804e4b03ce7db4985a32182e6670)
@@ -4,7 +4,7 @@
 
 This page contains information about metadata extraction, which happens when a file is uploaded to the Alfresco repository.
 
-For information about configuring metadata extractors, see [Metadata Extractors]({% link content-services/community/develop/repo-ext-points/metadata-extractors.md %}).
+For information about configuring metadata extractors, see [metadata extraction extension point]({% link content-services/community/develop/repo-ext-points/metadata-extractors.md %}).
 
 ## File metadata mapping to Repository properties
 
Index: content-services/community/admin/transformations.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- content-services/community/admin/transformations.md	(revision 437759a08b8505abf11d7e0386132dfc6a0f5f40)
+++ content-services/community/admin/transformations.md	(revision db02f804fb60804e4b03ce7db4985a32182e6670)
@@ -4,6 +4,8 @@
 
 When you're working with transformations, it is important to understand how file types map to one another and the transformation formats that each file type supports.
 
+For more information about T-Engines and custom transformations and renditions see [extension point]({% link content-services/community/develop/repo-ext-points/content-transformers-renditions.md %}).
+
 Transformations can cause `OutOfMemory` errors under certain conditions; for example, if you're using Excel (`.xlsx`) files that contain shapes or drawings (.xml content).
 
 ## Standard transform options {#standard}
Index: content-services/community/config/index.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- content-services/community/config/index.md	(revision 437759a08b8505abf11d7e0386132dfc6a0f5f40)
+++ content-services/community/config/index.md	(revision db02f804fb60804e4b03ce7db4985a32182e6670)
@@ -47,22 +47,11 @@
 
     Additional database properties can be set for further configuration. See [Configuring databases]({% link content-services/community/config/databases.md %}) for more information.
 
-4. Specify the locations of the following external software:
+4. Configure your supported database for use. See [Configuring databases]({% link content-services/community/config/databases.md %}).
 
-    | Property | Description |
-    | -------- | ------------|
-    | jodconverter.enabled= | Specifies whether to use the JODConverter. Set the property to `true`. |
-    | img.root= | Specifies the location of the ImageMagick installation. |
-    | img.coders= | Specifies the path to the image coders directory. Normally `${img.root}/modules/coders` |
-    | img.config= | Specifies the path to the image config directory. Normally `${img.root}` on Windows and `${img.root}/config` on Linux. |
-    | img.exe= | Specifies the path to the convert executable. Normally `${img.root}convert.exe` on Windows and /usr/bin/convert on Linux. |
-    | alfresco-pdf-renderer.exe | Specifies the path to the Alfresco PDF renderer executable. Normally this will be `C:\\Alfresco\\alfresco-pdf-renderer.exe` on Windows and `/usr/bin/alfresco-pdf-renderer` on Linux. |
+5. Select a JDBC driver used with each connection type.
 
-5. Configure your supported database for use. See [Configuring databases]({% link content-services/community/config/databases.md %}).
-
-6. Select a JDBC driver used with each connection type.
-
-7. Add your global custom configurations.
+6. Add your global custom configurations.
 
     > **Note:** Ensure that you use single-byte character sets (ISO-8859-1 Latin 1) in your `alfresco-global.properties` settings, particularly the `system.webdav.rootPath` setting. If you require other characters, you can use Unicode equivalents. For example, if your root path in Cyrillic was `фолдер`, which means folder in English, a valid value would be:
 
@@ -70,7 +59,7 @@
     system.webdav.rootPath=/app:company_home/cm:\u0444\u043E\u043B\u0434\u0435\u0440
     ```
 
-8. Save your file without the `.sample` extension.
+7. Save your file without the `.sample` extension.
 
 You need to restart the server for the configuration changes to take effect.
 
Index: content-services/community/config/repository.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- content-services/community/config/repository.md	(revision 437759a08b8505abf11d7e0386132dfc6a0f5f40)
+++ content-services/community/config/repository.md	(revision db02f804fb60804e4b03ce7db4985a32182e6670)
@@ -826,21 +826,7 @@
 
 Metadata extractors offer server-side extraction of values from added or updated content.
 
-1. Download the [content-services-context.xml](https://github.com/Alfresco/alfresco-community-repo/blob/release/6.2.2/repository/src/main/resources/alfresco/content-services-context.xml){:target=""} file.
-
-2. Copy the file to `<extension>` and save it with the name `custom-repository-context.xml`.
-
-    This file contains definitions of the default set of extractors.
-
-3. Declare a new extractor in the `<extension>/custom-repository-context.xml` file.
-
-    The following example shows a new extractor written in class `com.company.MyExtracter`:
-
-    ```bash
-    <bean id="com.company.MyExtracter" class="com.company.MyExtracter" parent="baseMetadataExtracter" />
-    ```
-
-4. Save the file and then restart the Content Service server.
+For more information see [metadata extraction extension point]({% link content-services/community/develop/repo-ext-points/metadata-extractors.md %}). 
 
 ## About aspects
 
Index: content-services/community/config/subsystems.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- content-services/community/config/subsystems.md	(revision 437759a08b8505abf11d7e0386132dfc6a0f5f40)
+++ content-services/community/config/subsystems.md	(revision db02f804fb60804e4b03ce7db4985a32182e6670)
@@ -50,11 +50,10 @@
 | [fileServers]({% link content-services/community/config/file-servers.md %}) | Properties for the FTP servers |
 | [googledocs]({% link google-drive/latest/index.md %}) | Properties for Google Docs integration |
 | [imap]({% link content-services/community/config/email.md %}#configure-imap) | Properties for the IMAP service |
-| [OOoDirect]({% link content-services/community/config/libreoffice.md %}#configure-openoffice) | OpenOffice transformations settings (use LibreOffice where possible) |
 | [Replication]({% link content-services/community/admin/replication.md %}) | Settings for the replication jobs tool |
 | [Search]({% link search-services/latest/index.md %}) | Search mechanism |
 | [Synchronization]({% link content-services/community/admin/auth-sync.md %}#configuring-synchronization) | Synchronization of local user and group information with the user registry exporters (usually LDAP directories) in the authentication chain |
-| [thirdparty]({% link content-services/community/config/libreoffice.md %}#change-ooojodconverter) | Properties for third-party software, for example, ImageMagick |
+| thirdparty| Properties for third-party software |
 | [Transformers]({% link content-services/community/admin/transformations.md %}) | Properties for the transformation server |
 | [wcm_deployment_receiver]({% link content-services/community/admin/workflows.md %}#workflowconsole) | Properties for WCM Deployment Receiver |
 
Index: content-services/community/develop/sdk.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- content-services/community/develop/sdk.md	(revision 437759a08b8505abf11d7e0386132dfc6a0f5f40)
+++ content-services/community/develop/sdk.md	(revision db02f804fb60804e4b03ce7db4985a32182e6670)
@@ -11,7 +11,9 @@
 and Test Driven Development (TDD).
 
 Alfresco SDK 4.1 is released under [Apache License version 2.0](http://www.apache.org/licenses/LICENSE-2.0.html){:target="_blank"} 
-and supports Content Services both in Community Edition and Enterprise Edition.
+and supports Content Services both in Community Edition and Enterprise Edition. If you're an Enterprise customer, 
+please check the [Alfresco SDK Support status]({% link content-services/latest/support/index.md %}) 
+for the version you're using. If your version is in Limited or Full Support and you need help, contact our [Support team](https://support.alfresco.com/){:target="_blank"}.
 
 Alfresco SDK 4.1 is a minor update to the SDK and provides support for Alfresco 6.2.x.
 
@@ -409,7 +411,7 @@
 
 After generating a project using one of the Alfresco SDK 4.1 Maven archetypes, it is important to know how to build / run / test these projects.
 
-The Alfresco Platform 6 [deployment]({% link content-services/community/install/containers/index.md %}){:target="_blank"} architecture is highly based on container technologies, specifically in Docker. 
+The Alfresco Platform 6 [deployment]({% link content-services/latest/install/containers/index.md %}){:target="_blank"} architecture is highly based on container technologies, specifically in Docker. 
 Due to that, the projects generated using the Alfresco SDK 4.1 archetypes set up their local environment making an intensive use of Docker and Docker compose 
 technologies.
 
@@ -468,8 +470,8 @@
 
 #### Introduction
 
-An AIO SDK project is used to build extensions for both [Content Services (ACS) Repository]({% link content-services/community/develop/repo-ext-points/index.md %}) 
-and [Alfresco Share UI]({% link content-services/community/develop/share-ext-points/index.md %}). The runtime environment
+An AIO SDK project is used to build extensions for both [Content Services (ACS) Repository]({% link content-services/latest/develop/repo-ext-points/index.md %}) 
+and [Alfresco Share UI]({% link content-services/latest/develop/share-ext-points/index.md %}). The runtime environment
 for ACS is Docker so not only is this project building the source code for your extensions but also the 
 custom Docker images for the Alfresco Repository and Alfresco Share. The custom Docker images includes the 
 JARs, or AMPs, with your extension code. 
@@ -715,7 +717,7 @@
 
 #### Introduction
 
-A Platform project is used to build extensions for the [Content Services (ACS) Repository]({% link content-services/community/develop/repo-ext-points/index.md %}). 
+A Platform project is used to build extensions for the [Content Services (ACS) Repository]({% link content-services/latest/develop/repo-ext-points/index.md %}). 
 The runtime environment for ACS is Docker so not only is this project building the source code for your extensions but also the 
 custom Docker image for the Alfresco Repository. The custom Docker images includes the JARs, or AMPs, with your extension code. 
 
@@ -948,7 +950,7 @@
 
 #### Introduction
 
-An Alfresco Share project is used to build extensions for [Alfresco Share UI]({% link content-services/community/develop/share-ext-points/index.md %}). 
+An Alfresco Share project is used to build extensions for [Alfresco Share UI]({% link content-services/latest/develop/share-ext-points/index.md %}). 
 The runtime environment for ACS is Docker so not only is this project building the source code for your extensions but also the 
 custom Docker image for Alfresco Share. The custom Docker images includes the 
 JARs, or AMPs, with your extension code. 
@@ -1409,7 +1411,7 @@
 `src/main/resources/alfresco/module/<artifactId>` | This folder contains all the configuration files and settings for the Alfresco Share module. Here you can find the property file for the module.
 `src/main/resources/alfresco/web-extension` | In this folder you can find the extensions to the web client (Alfresco Share) and it's where you store Spring configurations that extend and override the system Share configuration. There are two important sub-directories here: `site-data` and `site-webscripts`.
 `src/main/resources/alfresco/META-INF/resources` | This folder hosts the content that will be placed in the `META-INF` folder of a standard Java web application. It is best practice to use a further subdirectory based on the module name. This allows you to manage multiple modules, so that their web resources don't conflict with each other.
-`src/main/resources/alfresco/META-INF/share-config-custom.xml` | This file is a relevant Alfresco Share file used to configure the sub-project with the correct settings, depending on your environment. For more details, see [Share configuration]({% link content-services/community/develop/share-ext-points/index.md %}).
+`src/main/resources/alfresco/META-INF/share-config-custom.xml` | This file is a relevant Alfresco Share file used to configure the sub-project with the correct settings, depending on your environment. For more details, see [Share configuration]({% link content-services/latest/develop/share-ext-points/index.md %}).
 `src/test/java/<groupId>...` | This folder contains the same content you can find in a regular Java project, i.e. the Java source code for tests. Here you should put all the custom classes, interfaces, and Java source code related to tests.
 
 #### my-all-in-one-project-share-docker
@@ -1654,7 +1656,7 @@
 `src/main/resources/alfresco/module/<artifactId>` | This folder contains all the configuration files and settings for the Alfresco Share module. Here you can find the property file for the module.
 `src/main/resources/alfresco/web-extension` | In this folder you can find the extensions to the web client (Alfresco Share) and it's where you store Spring configurations that extend and override the system Share configuration. There are two important sub-directories here: `site-data` and `site-webscripts`.
 `src/main/resources/alfresco/META-INF/resources` | This folder hosts the content that will be placed in the `META-INF` folder of a standard Java web application. It is best practice to use a further subdirectory based on the module name. This allows you to manage multiple modules, so that their web resources don't conflict with each other.
-`src/main/resources/alfresco/META-INF/share-config-custom.xml` | This file is a relevant Alfresco Share file used to configure the sub-project with the correct settings, depending on your environment. For more details, see [Share configuration]({% link content-services/community/develop/share-ext-points/index.md %}).
+`src/main/resources/alfresco/META-INF/share-config-custom.xml` | This file is a relevant Alfresco Share file used to configure the sub-project with the correct settings, depending on your environment. For more details, see [Share configuration]({% link content-services/latest/develop/share-ext-points/index.md %}).
 `src/test/java/<groupId>...` | This folder contains the same content you can find in a regular Java project, i.e. the Java source code for tests. Here you should put all the custom classes, interfaces, and Java source code related to tests.
 
 
@@ -1952,108 +1954,31 @@
 
 ##### Adding the new containers
 
-* Locate the Docker compose file (usually at `PROJECT_ROOT_PATH/docker/docker-compose.yml`) and add the containers that conform ATS (`transform-router`, 
-`alfresco-pdf-renderer`, `imagemagick`, `libreoffice`, `tika`, `transform-misc`, `shared-file-store` and `activemq`):
+* Locate the Docker compose file (usually at `PROJECT_ROOT_PATH/docker/docker-compose.yml`) and add the container that 
+contains AIO transformer:
 
 ```text
 services:
 ...
-  transform-router:
-    image: quay.io/alfresco/alfresco-transform-router:1.1.0-RC3
+  transform-core-aio:
+    image: alfresco/alfresco-transform-core-aio:2.3.8
+    mem_limit: 1536m
     environment:
-      JAVA_OPTS: " -Xms256m -Xmx512m"
-      ACTIVEMQ_URL: "nio://activemq:61616"
-      IMAGEMAGICK_URL: "http://imagemagick:8090"
-      PDF_RENDERER_URL : "http://alfresco-pdf-renderer:8090"
-      LIBREOFFICE_URL : "http://libreoffice:8090"
-      TIKA_URL : "http://tika:8090"
-      TRANSFORM_MISC_URL : "http://transform-misc:8090"
-      FILE_STORE_URL: "http://shared-file-store:8099/alfresco/api/-default-/private/sfs/versions/1/file"
-    ports:
-      - 8095:8095
-    links:
-      - activemq
-  alfresco-pdf-renderer:
-    image: alfresco/alfresco-pdf-renderer:2.1.0-RC2
-    environment:
-      JAVA_OPTS: " -Xms256m -Xmx512m"
-      ACTIVEMQ_URL: "nio://activemq:61616"
-      FILE_STORE_URL: "http://shared-file-store:8099/alfresco/api/-default-/private/sfs/versions/1/file"
+        JAVA_OPTS: " -XX:MinRAMPercentage=50 -XX:MaxRAMPercentage=80"
     ports:
-      - 8090:8090
-    links:
-      - activemq
-  imagemagick:
-    image: alfresco/alfresco-imagemagick:2.1.0-RC2
-    environment:
-      JAVA_OPTS: " -Xms256m -Xmx512m"
-      ACTIVEMQ_URL: "nio://activemq:61616"
-      FILE_STORE_URL: "http://shared-file-store:8099/alfresco/api/-default-/private/sfs/versions/1/file"
-    ports:
-      - 8091:8090
-    links:
-      - activemq
-  libreoffice:
-    image: alfresco/alfresco-libreoffice:2.1.0-RC2
-    environment:
-      JAVA_OPTS: " -Xms256m -Xmx512m"
-      ACTIVEMQ_URL: "nio://activemq:61616"
-      FILE_STORE_URL: "http://shared-file-store:8099/alfresco/api/-default-/private/sfs/versions/1/file"
-    ports:
-      - 8092:8090
-    links:
-      - activemq
-  tika:
-    image: alfresco/alfresco-tika:2.1.0-RC2
-    environment:
-      JAVA_OPTS: " -Xms256m -Xmx512m"
-      ACTIVEMQ_URL: "nio://activemq:61616"
-      FILE_STORE_URL: "http://shared-file-store:8099/alfresco/api/-default-/private/sfs/versions/1/file"
-    ports:
-      - 8093:8090
-    links:
-      - activemq
-  transform-misc:
-    image: alfresco/alfresco-transform-misc:2.1.0-RC2
-    environment:
-      JAVA_OPTS: " -Xms256m -Xmx512m"
-      ACTIVEMQ_URL: "nio://activemq:61616"
-      FILE_STORE_URL: "http://shared-file-store:8099/alfresco/api/-default-/private/sfs/versions/1/file"
-    ports:
-      - 8094:8090
-    links:
-      - activemq    
-  shared-file-store:
-    image: alfresco/alfresco-shared-file-store:0.5.3
-    environment:
-      JAVA_OPTS: " -Xms256m -Xmx512m"
-      scheduler.content.age.millis: 86400000
-      scheduler.cleanup.interval: 86400000
-    ports:
-      - 8099:8099
-    volumes:
-      - shared-file-store-volume:/tmp/Alfresco/sfs
+        - 8090:8090  
   activemq:
-    image: alfresco/alfresco-activemq:5.15.8
+    image: alfresco/alfresco-activemq:5.16.1
+    mem_limit: 1g
     ports:
-      - 8161:8161 # Web Console
-      - 5672:5672 # AMQP
-      - 61616:61616 # OpenWire
-      - 61613:61613 # STOMP
+        - 8161:8161 # Web Console
+        - 5672:5672 # AMQP
+        - 61616:61616 # OpenWire
+        - 61613:61613 # STOMP
 ...
 ```
 
 * Check that you haven't any port conflict with other services in the Docker compose file.
-* Add the new volume required for the shared file store (`alfresco/alfresco-shared-file-store`) in the Docker compose file:
-
-```text
-volumes:
-  ...
-  shared-file-store-volume:
-    driver_opts:
-      type: tmpfs
-      device: tmpfs
-```
 
 ##### Adding the required configuration
 
@@ -2061,25 +1986,7 @@
 and add the ATS configuration properties:
 
 ```text
-# Alfresco Transform Service
-transform.service.enabled=true
-transform.service.url=http://transform-router:8095
-sfs.url=http://shared-file-store:8099/
-
-local.transform.service.enabled=true
-localTransform.pdfrenderer.url=http://alfresco-pdf-renderer:8090/
-localTransform.imagemagick.url=http://imagemagick:8090/
-localTransform.libreoffice.url=http://libreoffice:8090/
-localTransform.tika.url=http://tika:8090/
-localTransform.misc.url=http://transform-misc:8090/
-
-legacy.transform.service.enabled=true
-alfresco-pdf-renderer.url=http://alfresco-pdf-renderer:8090/
-jodconverter.url=http://libreoffice:8090/
-img.url=http://imagemagick:8090/
-tika.url=http://tika:8090/
-transform.misc.url=http://transform-misc:8090/
-
+localTransform.core-aio.url=http://transform-core-aio:8090/
 messaging.broker.url=failover:(nio://activemq:61616)?timeout=3000&jms.useCompression=true
 ```
 
@@ -3288,7 +3195,8 @@
 By default, the projects generated making use of the archetypes provided by the Alfresco SDK 4 are pre-configured to work with a specific database, which is 
 PostgreSQL. 
 
-Anyway, ACS is developed and tested to support a wide range of platforms and languages, which includes a set of supported databases.
+Anyway, ACS is developed and tested to [support a wide range of platforms and languages]({% link content-services/latest/support/index.md %}). 
+That includes a set of supported databases.
 
 In this article, we are going to detail the process to modify a project generated from the SDK's archetypes to use a different database. In this case, we're 
 going to show how to configure a project to work with MySQL instead of PostgreSQL.
Index: content-services/community/install/zip/additions.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- content-services/community/install/zip/additions.md	(revision 437759a08b8505abf11d7e0386132dfc6a0f5f40)
+++ content-services/community/install/zip/additions.md	(revision db02f804fb60804e4b03ce7db4985a32182e6670)
@@ -2,147 +2,10 @@
 title: Install additional software
 ---
 
-You can install the third-party software used by Community Edition independently. Some of the software can be installed any time before or after installing Community Edition.
+You can install the third-party software used by Community Edition independently. Some of the software can be installed 
+any time before or after installing Community Edition.
 
-## Install LibreOffice
-
-In Community Edition, you can transform a document from one format to another, for example, a text file to a PDF file. To access these transformation facilities, you must install LibreOffice. This is optional, and can be done any time after Community Edition is installed.
-
-1. Browse to the [LibreOffice download site](https://www.libreoffice.org/download/download/){:target="_blank"}.
-
-2. Download the latest (stable) version of LibreOffice for your platform.
-
-3. When prompted, specify a download destination.
-
-4. Browse to the location of your downloaded file, and install the application.
-
-5. Change the installation directory to:
-
-    * (Windows) `c:\Alfresco\LibreOffice`
-    * (Linux) `/opt/alfresco/LibreOffice`
-
-    If you're installing LibreOffice on Linux, you also need a number of libraries to be installed. See [Install Linux libraries](#install-linux-libraries) for more.
-
-6. Modify the `jodconverter.officeHome` property in the `<classpathRoot>/alfresco-global.properties` file to point to the LibreOffice install location.
-
-    > **Note:** For Windows, set the path using the `\\` separator, or use the forward slash `/` Unix path separator. For example: `c:\\Alfresco\\LibreOffice` or `c:/Alfresco/LibreOffice`.
-
-7. If the Community Edition server is running, stop and restart the server.
-
-### Install Linux libraries
-
-Use this information to install Linux libraries manually on supported Linux distributions, such as Ubuntu, SUSE and Red Hat.
-
-LibreOffice requires the following libraries to be installed on your system:
-
-* libfontconfig
-* libICE
-* libSM
-* libXrender
-* libXext
-* libXinerama
-* libcups
-* libGLU
-* libcairo2
-* libgl1-mesa-glx
-
-If the required libraries are missing, you'll get a warning message. You can install them using your preferred package manager from the command line. Note that the file names for the Linux libraries may vary by distribution.
-
-For Red Hat Enterprise Linux/CentOS, you can run:
-
-```bash
-cd <libre-install-dir>/LibreOffice_*.*.*.*_Linux_x86-64_rpm/RPMS/
-```
-
-```bash
-sudo yum localinstall *rpm
-```
-
-For Ubuntu:
-
-```bash
-cd <libre-install-dir>/LibreOffice_*.*.*.*_Linux_x86-64_rpm/RPMS/
-```
-
-```bash
-sudo dpkg -i *deb
-```
-
-If LibreOffice doesn't start up normally with Community Edition, test it manually, for example, by running this startup script:
-
-```bash
-start ex. {installdir}/libreoffice/scripts/libreoffice_ctl.sh start
-status ex. {installdir}/libreoffice/scripts/libreoffice_ctl.sh status
-```
-
-If you receive errors that indicate that a library is missing, work with your system administrator to add the missing library or its equivalent from your configured repositories.
-
-## Install ImageMagick
-
-To enable image manipulation in Community Edition, you must install and configure ImageMagick. Community Edition uses ImageMagick to manipulate images for previewing.
-
-1. Verify that ImageMagick is already installed on your system.
-
-    Use the ImageMagick convert command to check that you have the right software installed on your machine. This command is usually located in `/usr/bin`: `install Image`.
-
-2. If the ImageMagick software isn't available on your system, download and install the appropriate package for your platform.
-
-    To download ImageMagick, browse to the [ImageMagick download website](https://www.imagemagick.org/script/download.php){:target="_blank"}.
-
-    > **Note:** In next steps, you'll make changes to the Community Edition configuration files to enable the manually installed ImageMagick application. These steps can only be performed after Community Edition has been installed.
-
-3. Browse to the `<classpathRoot>` directory.
-
-4. Open the `alfresco-global.properties` file.
-
-5. Modify the ImageMagick properties to point to the ImageMagick root directory.
-
-    | Property | Description |
-    | -------- | ----------- |
-    | img.root | Windows: `img.root=C:\\ImageMagick`<br>Linux: `img.root=/ImageMagick`<br><br>**Note:** Don't include a slash (`/`) at the end of the path, i.e. `/ImageMagick/`. |
-    | img.dyn | Windows: `img.dyn=${img.root}\\lib` <br>Linux: `img.dyn=${img.root}/lib` |
-    | img.exe | Windows: `img.exe=${img.root}\\convert.exe` <br>Linux: `img.exe=${img.root}/bin/convert` |
-    | img.coders | Windows: `img.coders=${img.root}\\modules\\coders` <br>Linux: `img.coders=${img.root}/modules/coders` |
-    | img.config | Windows: `img.config=${img.root}\\config` <br>Linux: `img.config=${img.root}/config` |
-    | img.url | Windows: `img.url=${img.root}\\url` <br>Linux: `img.url=${img.root}/url` |
-
-> **Note:** Test that you're able to convert a PDF using the command: `convert filename.pdf[0] filename.png`
-
-## Install alfresco-pdf-renderer
-
-Community Edition uses `alfresco-pdf-renderer` for creating document thumbnails and previews. Use this information to install `alfresco-pdf-renderer` on your system.
-
-> **Note:** To use the `alfresco-pdf-renderer`, ensure that Community Edition is installed. Changes made to the `alfresco-global.properties` file in your installation will change the configuration and enable you to manually install the `alfresco-pdf-renderer` application.
-
-> **Note:** The `alfresco-pdf-renderer` executable file is platform-specific.
-
-The `alfresco-pdf-renderer` binaries are available in the Community Edition distribution zip.
-
-* For Windows:
-  * Extract the file `alfresco-pdf-renderer/alfresco-pdf-renderer-1.0-win64.tgz` to a location of your choice.
-  * Browse to the location of your saved file and extract the archive.
-  * Add the following properties to the `alfresco-global.properties` file:
-
-    ```bash
-    alfresco-pdf-renderer.root=<alfresco-pdf-renderer_installation_dir>
-    alfresco-pdf-renderer.exe=${alfresco-pdf-renderer.root}/alfresco-pdf-renderer
-    alfresco-pdf-renderer.url=http://localhost:8090/
-    ```
-
-* For Linux:
-  * Extract the file `alfresco-pdf-renderer/alfresco-pdf-renderer-1.0-linux.tgz` to a location of your choice.
-  * Browse to the location of your saved file and extract the archive.
-  * Add the following properties to the `alfresco-global.properties` file:
-
-    ```bash
-    alfresco-pdf-renderer.root=<alfresco-pdf-renderer_installation_dir>
-    alfresco-pdf-renderer.exe=${alfresco-pdf-renderer.root}/alfresco-pdf-renderer
-    alfresco-pdf-renderer.url=http://localhost:8090/
-    ```
-
-> **Note:** Use the `alfresco-pdf-renderer.url` property when running `alfresco-pdf-renderer` remotely. If you're running `alfresco-pdf-renderer` locally, then you don't need to set this property.
-
-## Language support
+## Install TinyMCE language packs
 
 Translations in Community Edition use language packs. The supported language packs are:
 
@@ -162,25 +25,17 @@
 
 The source-localized files are encoded in ASCII, and the special and accented characters are displayed using escape sequences. The source files have been renamed using the corresponding locale for each language. For example, `site-welcome.properties` is called `sitewelcome_ fr.properties` for the French version.
 
-Although the interface is localized, the following components have not been localized, therefore, any strings originating from these components will be displayed in English.
+If you wish to use a translation that is not supplied with Community Edition, then you must add the appropriate TinyMCE language pack for the translation to work correctly.
 
-* SharePoint
-* LibreOffice
+1. Browse to the [TinyMCE website](http://tinymce.moxiecode.com/download_i18n.php){:target="_blank"}.
 
-The following files are not localized and the error messages remain in English to ease searching for fixes to issues.
+2. Download the required TinyMCE language pack.
 
-* `content-service.properties`
-* `dictionary-messages.properties`
-* `module-messages.properties`
-* `patch-service.properties`
-* `repoadmin-interpreter-help.properties`
-* `schema-update.properties`
-* `system-messages.properties` (partially translated)
-* `tenant-interpreter-help.properties`
-* `version-service.properties`
-* `webclient-config-admin-interpreter-help.properties`
-* `workflow-interpreter-help.properties`
-* `control.properties` (in `remote-api` directory)
+    > **Note:** The next step makes configuration changes to the Alfresco Share application to configure the additional language packs for TinyMCE. This step can only be performed after Community Edition has been installed.
+
+3. Unpack the language file to `<TOMCAT_HOME>/webapps/share/modules/editors/tiny_mce/langs`.
+
+4. Ensure that the browser cache is cleared or refresh the page.
 
 ## Install integrations
 
Index: content-services/latest/install/zip/additions.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- content-services/latest/install/zip/additions.md	(revision 437759a08b8505abf11d7e0386132dfc6a0f5f40)
+++ content-services/latest/install/zip/additions.md	(revision db02f804fb60804e4b03ce7db4985a32182e6670)
@@ -4,54 +4,6 @@
 
 You can install the third-party software used by Content Services independently. Some of the software can be installed any time before or after installing Content Services.
 
-### Install Linux libraries
-
-Use this information to install Linux libraries manually on supported Linux distributions, such as Ubuntu, SUSE and Red Hat.
-
-LibreOffice requires the following libraries to be installed on your system:
-
-* libfontconfig
-* libICE
-* libSM
-* libXrender
-* libXext
-* libXinerama
-* libcups
-* libGLU
-* libcairo2
-* libgl1-mesa-glx
-
-If the required libraries are missing, you'll get a warning message. You can install them using your preferred package manager from the command line. Note that the file names for the Linux libraries may vary by distribution.
-
-For Red Hat Enterprise Linux/CentOS, you can run:
-
-```bash
-cd <libre-install-dir>/LibreOffice_*.*.*.*_Linux_x86-64_rpm/RPMS/
-```
-
-```bash
-sudo yum localinstall *rpm
-```
-
-For Ubuntu:
-
-```bash
-cd <libre-install-dir>/LibreOffice_*.*.*.*_Linux_x86-64_rpm/RPMS/
-```
-
-```bash
-sudo dpkg -i *deb
-```
-
-If LibreOffice doesn't start up normally with Content Services, test it manually, for example, by running this startup script:
-
-```bash
-start ex. {installdir}/libreoffice/scripts/libreoffice_ctl.sh start
-status ex. {installdir}/libreoffice/scripts/libreoffice_ctl.sh status
-```
-
-If you receive errors that indicate that a library is missing, work with your system administrator to add the missing library or its equivalent from your configured repositories.
-
 ## Install TinyMCE language packs
 
 Translations in Content Services use language packs. The supported language packs are:
@@ -72,13 +24,13 @@
 
 The source-localized files are encoded in ASCII, and the special and accented characters are displayed using escape sequences. The source files have been renamed using the corresponding locale for each language. For example, `site-welcome.properties` is called `sitewelcome_ fr.properties` for the French version.
 
-If you wish to use a translation that is not supplied with Alfresco Community Edition, then you must add the appropriate TinyMCE language pack for the translation to work correctly.
+If you wish to use a translation that is not supplied with Content Services, then you must add the appropriate TinyMCE language pack for the translation to work correctly.
 
 1. Browse to the [TinyMCE website](http://tinymce.moxiecode.com/download_i18n.php){:target="_blank"}.
 
 2. Download the required TinyMCE language pack.
 
-    > **Note:** The next step makes configuration changes to the Alfresco Share application to configure the additional language packs for TinyMCE. This step can only be performed after Community Edition has been installed.
+    > **Note:** The next step makes configuration changes to the Alfresco Share application to configure the additional language packs for TinyMCE. This step can only be performed after Content Services has been installed.
 
 3. Unpack the language file to `<TOMCAT_HOME>/webapps/share/modules/editors/tiny_mce/langs`.
 
Index: content-services/community/config/libreoffice.md
===================================================================
--- content-services/community/config/libreoffice.md	(revision 437759a08b8505abf11d7e0386132dfc6a0f5f40)
+++ content-services/community/config/libreoffice.md	(revision 437759a08b8505abf11d7e0386132dfc6a0f5f40)
@@ -1,97 +0,0 @@
----
-title: Configure LibreOffice
----
-
-You can transform a document from one format to another using the **OOoJodconverter** subsystem. This feature requires you to install LibreOffice.
-
-The Jodconverter integration is a library that improves the stability and performance of LibreOffice in Community Edition. The Jodconverter runs on the same machine as the Community Edition server and it supports:
-
-* a pool of separate LibreOffice processes
-* automatic restart of crashed LibreOffice processes
-* automatic termination of slow LibreOffice operations
-* automatic restart of any LibreOffice process after a number of operations (this is a workaround for LibreOffice memory leaks)
-
-It's also possible to use OpenOffice instead of LibreOffice.
-
-## Change the OOoJodconverter subsystems {#change-ooojodconverter}
-
-The default subsystem for LibreOffice transformations is OOoJodconverter.
-
-You can change the OOoJodConverter and OOoDirect subsystems using the following ways:
-
-* Admin Console - Transformation Services
-* Runtime administration using your JMX client
-* Modifying the global properties file
-
-{% capture admin-console %}
-
-1. Open the Admin Console.
-
-2. In the **Repository Services** section, click **Transformation Services** to open the Transformation Services page.
-
-3. Set the Office Transform - JODConverter properties.
-
-    | Property | Description |
-    | -------- | ------------|
-    | JODConverter Enabled | Enables or disables the JODConverter for transformations, for example `Yes`. |
-    | Max Tasks per Process | The maximum number of tasks that can be performed concurrently, for example `200`. |
-    | Office Suite Location | The directory path locations of OpenOffice.org or LibreOffice, for example `/opt/libreoffice6.3/`. |
-    | Port Numbers | The port number that JODConverter uses. To enable multiple process instances, enter a comma-separated list of port numbers, all of which must be available, for example `8100`. |
-    | Task Execution Timeout | The duration in milliseconds after which a task will timeout, for example `120000`. |
-    | Task Queue Timeout | The duration in milliseconds after which the task queue will timeout, for example `30000`. |
-
-4. Click **Save** to apply the changes you've made to the properties.
-
-    If you don't want to save the changes, click **Cancel**.
-
-{% endcapture %}
-{% capture jmx %}
-
-1. Open your JMX client, for example, JConsole.
-
-2. Locate the `OOoJodconverter` subsystem.
-
-3. Edit the property setting, such as set the `jodconverter.enabled` value to `true`.
-
-4. Restart the subsystem.
-
-{% endcapture %}
-{% capture global %}
-
-If you've previously modified a value using the Admin Console or JMX, it'll take preference to any change made to the global properties file.
-
-1. Open the `alfresco-global.properties` file.
-
-2. Edit the property setting, such as set the `jodconverter.enabled` value to `true`.
-
-3. Save the file.
-
-4. Restart the Community Edition server.
-
-{% endcapture %}
-
-{% include tabs.html opt1="Admin Console" content1=admin-console opt2="JMX" content2=jmx opt3="Global properties" content3=global %}
-
-## Jodconverter configuration properties
-
-The OOoJodconverter subsystem uses LibreOffice. Configure the following properties for the OOoJodconverter subsystem using either the Admin Console, JMX, or the global properties file.
-
-| Property | Description |
-| -------- | ------------|
-| jodconverter.connectTimeout | Specifies the maximum number of milliseconds before a connection times out. The default is `10000` milliseconds (10 seconds). |
-| jodconverter.enabled | Enables or disables the Jodconverter process(es). |
-| jodconverter.maxTasksPerProcess | Specifies the number of transforms before the process restarts. The default is `200`. |
-| jodconverter.officeHome | Specifies the name of the LibreOffice install directory. The following are examples of install directory paths:<br><br>Windows: `jodconverter.officeHome=c:/Alfresco/libreoffice`<br>Linux: `/opt/libreoffice6.3` |
-| jodconverter.portNumbers | Specifies the port numbers used by each processing thread. The number of process will match the number of ports.
-| jodconverter.taskExecutionTimeout | Specifies the maximum number of milliseconds that an operation is allowed to run before it is aborted. It is used to recover from operations that have hung. The default is `120000` milliseconds (2 minutes). |
-| jodconverter.taskQueueTimeout | Specifies the maximum number of milliseconds a task waits in the transformation queue before the process restarts. It's used to recover hung LibreOffice processes. The default is `30000 milliseconds` (30 seconds). |
-
-## Configure OpenOffice transformations in place of LibreOffice {#configure-openoffice}
-
-LibreOffice is used in preference to OpenOffice in Community Edition. Use this information if you need to configure OpenOffice transformations specifically. Although unsupported, it should be possible to use OpenOffice in place of LibreOffice. You can do this by setting the `jodconverter.officeHome` property to the path of the OpenOffice installation in the global properties file.
-
-1. Open the `alfresco-global.properties` file.
-
-2. Set the `jodconverter.officeHome` property to the path of the OpenOffice installation.
-
-3. Restart the Community Edition server.
